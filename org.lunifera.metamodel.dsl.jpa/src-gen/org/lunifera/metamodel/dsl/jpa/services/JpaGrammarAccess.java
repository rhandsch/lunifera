/*
* generated by Xtext
*/

package org.lunifera.metamodel.dsl.jpa.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.lunifera.metamodel.dsl.entity.services.EntityGrammarAccess;
import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class JpaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class JModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JModel");
		private final Assignment cJmodelAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cJmodelEntityModelParserRuleCall_0 = (RuleCall)cJmodelAssignment.eContents().get(0);
		
		//JModel:
		//
		//	jmodel=EntityModel;
		public ParserRule getRule() { return rule; }

		//jmodel=EntityModel
		public Assignment getJmodelAssignment() { return cJmodelAssignment; }

		//EntityModel
		public RuleCall getJmodelEntityModelParserRuleCall_0() { return cJmodelEntityModelParserRuleCall_0; }
	}

	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsJpaEntityAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Keyword cEntityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_3_1_0 = (RuleCall)cSuperTypeAssignment_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeaturesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeaturesAbstractFeatureParserRuleCall_5_0 = (RuleCall)cFeaturesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Entity:
		//
		//	annotations+=JpaEntityAnnotation* "entity" name=ValidID ("extends" superType=JvmParameterizedTypeReference)? "{"
		//
		//	features+=AbstractFeature* "}";
		public ParserRule getRule() { return rule; }

		//annotations+=JpaEntityAnnotation* "entity" name=ValidID ("extends" superType=JvmParameterizedTypeReference)? "{"
		//
		//features+=AbstractFeature* "}"
		public Group getGroup() { return cGroup; }

		//annotations+=JpaEntityAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//JpaEntityAnnotation
		public RuleCall getAnnotationsJpaEntityAnnotationParserRuleCall_0_0() { return cAnnotationsJpaEntityAnnotationParserRuleCall_0_0; }

		//"entity"
		public Keyword getEntityKeyword_1() { return cEntityKeyword_1; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("extends" superType=JvmParameterizedTypeReference)?
		public Group getGroup_3() { return cGroup_3; }

		//"extends"
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }

		//superType=JvmParameterizedTypeReference
		public Assignment getSuperTypeAssignment_3_1() { return cSuperTypeAssignment_3_1; }

		//JvmParameterizedTypeReference
		public RuleCall getSuperTypeJvmParameterizedTypeReferenceParserRuleCall_3_1_0() { return cSuperTypeJvmParameterizedTypeReferenceParserRuleCall_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//features+=AbstractFeature*
		public Assignment getFeaturesAssignment_5() { return cFeaturesAssignment_5; }

		//AbstractFeature
		public RuleCall getFeaturesAbstractFeatureParserRuleCall_5_0() { return cFeaturesAbstractFeatureParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsJpaPropertyAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cVarTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVarTypeVarKeyword_1_0 = (Keyword)cVarTypeAssignment_1.eContents().get(0);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Property:
		//
		//	annotations+=JpaPropertyAnnotation* varType="var" type=JvmTypeReference name=ValidID ";";
		public ParserRule getRule() { return rule; }

		//annotations+=JpaPropertyAnnotation* varType="var" type=JvmTypeReference name=ValidID ";"
		public Group getGroup() { return cGroup; }

		//annotations+=JpaPropertyAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//JpaPropertyAnnotation
		public RuleCall getAnnotationsJpaPropertyAnnotationParserRuleCall_0_0() { return cAnnotationsJpaPropertyAnnotationParserRuleCall_0_0; }

		//varType="var"
		public Assignment getVarTypeAssignment_1() { return cVarTypeAssignment_1; }

		//"var"
		public Keyword getVarTypeVarKeyword_1_0() { return cVarTypeVarKeyword_1_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_2_0() { return cTypeJvmTypeReferenceParserRuleCall_2_0; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }

		//";"
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAnnotationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cAnnotationsJpaReferenceAnnotationParserRuleCall_0_0 = (RuleCall)cAnnotationsAssignment_0.eContents().get(0);
		private final Assignment cRefTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cRefTypeRefTypeEnumRuleCall_1_0 = (RuleCall)cRefTypeAssignment_1.eContents().get(0);
		private final Keyword cRefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Reference:
		//
		//	annotations+=JpaReferenceAnnotation* refType=RefType? "ref" type=JvmTypeReference name=ValidID ";";
		public ParserRule getRule() { return rule; }

		//annotations+=JpaReferenceAnnotation* refType=RefType? "ref" type=JvmTypeReference name=ValidID ";"
		public Group getGroup() { return cGroup; }

		//annotations+=JpaReferenceAnnotation*
		public Assignment getAnnotationsAssignment_0() { return cAnnotationsAssignment_0; }

		//JpaReferenceAnnotation
		public RuleCall getAnnotationsJpaReferenceAnnotationParserRuleCall_0_0() { return cAnnotationsJpaReferenceAnnotationParserRuleCall_0_0; }

		//refType=RefType?
		public Assignment getRefTypeAssignment_1() { return cRefTypeAssignment_1; }

		//RefType
		public RuleCall getRefTypeRefTypeEnumRuleCall_1_0() { return cRefTypeRefTypeEnumRuleCall_1_0; }

		//"ref"
		public Keyword getRefKeyword_2() { return cRefKeyword_2; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_3_0() { return cTypeJvmTypeReferenceParserRuleCall_3_0; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class JpaAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JpaAnnotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cJpaEntityAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cJpaPropertyAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cJpaReferenceAnnotationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//JpaAnnotation:
		//
		//	JpaEntityAnnotation | JpaPropertyAnnotation | JpaReferenceAnnotation;
		public ParserRule getRule() { return rule; }

		//JpaEntityAnnotation | JpaPropertyAnnotation | JpaReferenceAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }

		//JpaEntityAnnotation
		public RuleCall getJpaEntityAnnotationParserRuleCall_0() { return cJpaEntityAnnotationParserRuleCall_0; }

		//JpaPropertyAnnotation
		public RuleCall getJpaPropertyAnnotationParserRuleCall_1() { return cJpaPropertyAnnotationParserRuleCall_1; }

		//JpaReferenceAnnotation
		public RuleCall getJpaReferenceAnnotationParserRuleCall_2() { return cJpaReferenceAnnotationParserRuleCall_2; }
	}

	public class JpaEntityAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JpaEntityAnnotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEmbeddableAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCachableAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JpaEntityAnnotation:
		//
		//	EmbeddableAnnotation | CachableAnnotation;
		public ParserRule getRule() { return rule; }

		//EmbeddableAnnotation | CachableAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }

		//EmbeddableAnnotation
		public RuleCall getEmbeddableAnnotationParserRuleCall_0() { return cEmbeddableAnnotationParserRuleCall_0; }

		//CachableAnnotation
		public RuleCall getCachableAnnotationParserRuleCall_1() { return cCachableAnnotationParserRuleCall_1; }
	}

	public class JpaPropertyAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JpaPropertyAnnotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdAnnotationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNullableAnnotationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//JpaPropertyAnnotation:
		//
		//	IdAnnotation | NullableAnnotation;
		public ParserRule getRule() { return rule; }

		//IdAnnotation | NullableAnnotation
		public Alternatives getAlternatives() { return cAlternatives; }

		//IdAnnotation
		public RuleCall getIdAnnotationParserRuleCall_0() { return cIdAnnotationParserRuleCall_0; }

		//NullableAnnotation
		public RuleCall getNullableAnnotationParserRuleCall_1() { return cNullableAnnotationParserRuleCall_1; }
	}

	public class JpaReferenceAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JpaReferenceAnnotation");
		private final RuleCall cManyToManyAnnotationParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//JpaReferenceAnnotation:
		//
		//	ManyToManyAnnotation;
		public ParserRule getRule() { return rule; }

		//ManyToManyAnnotation
		public RuleCall getManyToManyAnnotationParserRuleCall() { return cManyToManyAnnotationParserRuleCall; }
	}

	public class EmbeddableAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EmbeddableAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEmbeddableAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameEmbeddableKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		
		//EmbeddableAnnotation:
		//
		//	{EmbeddableAnnotation} "@" name="Embeddable";
		public ParserRule getRule() { return rule; }

		//{EmbeddableAnnotation} "@" name="Embeddable"
		public Group getGroup() { return cGroup; }

		//{EmbeddableAnnotation}
		public Action getEmbeddableAnnotationAction_0() { return cEmbeddableAnnotationAction_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//name="Embeddable"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"Embeddable"
		public Keyword getNameEmbeddableKeyword_2_0() { return cNameEmbeddableKeyword_2_0; }
	}

	public class CachableAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CachableAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cCachableAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameCachableKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		
		//CachableAnnotation:
		//
		//	{CachableAnnotation} "@" name="Cachable";
		public ParserRule getRule() { return rule; }

		//{CachableAnnotation} "@" name="Cachable"
		public Group getGroup() { return cGroup; }

		//{CachableAnnotation}
		public Action getCachableAnnotationAction_0() { return cCachableAnnotationAction_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//name="Cachable"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"Cachable"
		public Keyword getNameCachableKeyword_2_0() { return cNameCachableKeyword_2_0; }
	}

	public class IdAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IdAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameIDKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		
		//IdAnnotation:
		//
		//	{IdAnnotation} "@" name="ID";
		public ParserRule getRule() { return rule; }

		//{IdAnnotation} "@" name="ID"
		public Group getGroup() { return cGroup; }

		//{IdAnnotation}
		public Action getIdAnnotationAction_0() { return cIdAnnotationAction_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//name="ID"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"ID"
		public Keyword getNameIDKeyword_2_0() { return cNameIDKeyword_2_0; }
	}

	public class NullableAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullableAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cNullableAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameNullableKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		
		//NullableAnnotation:
		//
		//	{NullableAnnotation} "@" name="Nullable";
		public ParserRule getRule() { return rule; }

		//{NullableAnnotation} "@" name="Nullable"
		public Group getGroup() { return cGroup; }

		//{NullableAnnotation}
		public Action getNullableAnnotationAction_0() { return cNullableAnnotationAction_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//name="Nullable"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"Nullable"
		public Keyword getNameNullableKeyword_2_0() { return cNameNullableKeyword_2_0; }
	}

	public class ManyToManyAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ManyToManyAnnotation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cManyToManyAnnotationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCommercialAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNameManyToManyKeyword_2_0 = (Keyword)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Group cGroup_3_1_0 = (Group)cGroup_3_1.eContents().get(0);
		private final Keyword cTargetEntityKeyword_3_1_0_0 = (Keyword)cGroup_3_1_0.eContents().get(0);
		private final Assignment cTargetEntityAssignment_3_1_0_1 = (Assignment)cGroup_3_1_0.eContents().get(1);
		private final RuleCall cTargetEntityJvmParameterizedTypeReferenceParserRuleCall_3_1_0_1_0 = (RuleCall)cTargetEntityAssignment_3_1_0_1.eContents().get(0);
		private final Keyword cCommaSpaceKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Keyword cMappedByKeyword_3_1_2 = (Keyword)cGroup_3_1.eContents().get(2);
		private final Assignment cMappedByAssignment_3_1_3 = (Assignment)cGroup_3_1.eContents().get(3);
		private final RuleCall cMappedByValidIDParserRuleCall_3_1_3_0 = (RuleCall)cMappedByAssignment_3_1_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ManyToManyAnnotation:
		//
		//	{ManyToManyAnnotation} "@" name="ManyToMany" ("(" (("targetEntity=" targetEntity=JvmParameterizedTypeReference) ", "
		//
		//	"mappedBy=" mappedBy=ValidID)? ")")?;
		public ParserRule getRule() { return rule; }

		//{ManyToManyAnnotation} "@" name="ManyToMany" ("(" (("targetEntity=" targetEntity=JvmParameterizedTypeReference) ", "
		//
		//"mappedBy=" mappedBy=ValidID)? ")")?
		public Group getGroup() { return cGroup; }

		//{ManyToManyAnnotation}
		public Action getManyToManyAnnotationAction_0() { return cManyToManyAnnotationAction_0; }

		//"@"
		public Keyword getCommercialAtKeyword_1() { return cCommercialAtKeyword_1; }

		//name="ManyToMany"
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//"ManyToMany"
		public Keyword getNameManyToManyKeyword_2_0() { return cNameManyToManyKeyword_2_0; }

		//("(" (("targetEntity=" targetEntity=JvmParameterizedTypeReference) ", " "mappedBy=" mappedBy=ValidID)? ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//(("targetEntity=" targetEntity=JvmParameterizedTypeReference) ", " "mappedBy=" mappedBy=ValidID)?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"targetEntity=" targetEntity=JvmParameterizedTypeReference
		public Group getGroup_3_1_0() { return cGroup_3_1_0; }

		//"targetEntity="
		public Keyword getTargetEntityKeyword_3_1_0_0() { return cTargetEntityKeyword_3_1_0_0; }

		//targetEntity=JvmParameterizedTypeReference
		public Assignment getTargetEntityAssignment_3_1_0_1() { return cTargetEntityAssignment_3_1_0_1; }

		//JvmParameterizedTypeReference
		public RuleCall getTargetEntityJvmParameterizedTypeReferenceParserRuleCall_3_1_0_1_0() { return cTargetEntityJvmParameterizedTypeReferenceParserRuleCall_3_1_0_1_0; }

		//", "
		public Keyword getCommaSpaceKeyword_3_1_1() { return cCommaSpaceKeyword_3_1_1; }

		//"mappedBy="
		public Keyword getMappedByKeyword_3_1_2() { return cMappedByKeyword_3_1_2; }

		//mappedBy=ValidID
		public Assignment getMappedByAssignment_3_1_3() { return cMappedByAssignment_3_1_3; }

		//ValidID
		public RuleCall getMappedByValidIDParserRuleCall_3_1_3_0() { return cMappedByValidIDParserRuleCall_3_1_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	
	
	private JModelElements pJModel;
	private EntityElements pEntity;
	private PropertyElements pProperty;
	private ReferenceElements pReference;
	private JpaAnnotationElements pJpaAnnotation;
	private JpaEntityAnnotationElements pJpaEntityAnnotation;
	private JpaPropertyAnnotationElements pJpaPropertyAnnotation;
	private JpaReferenceAnnotationElements pJpaReferenceAnnotation;
	private EmbeddableAnnotationElements pEmbeddableAnnotation;
	private CachableAnnotationElements pCachableAnnotation;
	private IdAnnotationElements pIdAnnotation;
	private NullableAnnotationElements pNullableAnnotation;
	private ManyToManyAnnotationElements pManyToManyAnnotation;
	
	private final Grammar grammar;

	private EntityGrammarAccess gaEntity;

	@Inject
	public JpaGrammarAccess(GrammarProvider grammarProvider,
		EntityGrammarAccess gaEntity) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaEntity = gaEntity;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.lunifera.metamodel.dsl.jpa.Jpa".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public EntityGrammarAccess getEntityGrammarAccess() {
		return gaEntity;
	}

	
	//JModel:
	//
	//	jmodel=EntityModel;
	public JModelElements getJModelAccess() {
		return (pJModel != null) ? pJModel : (pJModel = new JModelElements());
	}
	
	public ParserRule getJModelRule() {
		return getJModelAccess().getRule();
	}

	//Entity:
	//
	//	annotations+=JpaEntityAnnotation* "entity" name=ValidID ("extends" superType=JvmParameterizedTypeReference)? "{"
	//
	//	features+=AbstractFeature* "}";
	public EntityElements getEntityAccess() {
		return (pEntity != null) ? pEntity : (pEntity = new EntityElements());
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}

	//Property:
	//
	//	annotations+=JpaPropertyAnnotation* varType="var" type=JvmTypeReference name=ValidID ";";
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Reference:
	//
	//	annotations+=JpaReferenceAnnotation* refType=RefType? "ref" type=JvmTypeReference name=ValidID ";";
	public ReferenceElements getReferenceAccess() {
		return (pReference != null) ? pReference : (pReference = new ReferenceElements());
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//JpaAnnotation:
	//
	//	JpaEntityAnnotation | JpaPropertyAnnotation | JpaReferenceAnnotation;
	public JpaAnnotationElements getJpaAnnotationAccess() {
		return (pJpaAnnotation != null) ? pJpaAnnotation : (pJpaAnnotation = new JpaAnnotationElements());
	}
	
	public ParserRule getJpaAnnotationRule() {
		return getJpaAnnotationAccess().getRule();
	}

	//JpaEntityAnnotation:
	//
	//	EmbeddableAnnotation | CachableAnnotation;
	public JpaEntityAnnotationElements getJpaEntityAnnotationAccess() {
		return (pJpaEntityAnnotation != null) ? pJpaEntityAnnotation : (pJpaEntityAnnotation = new JpaEntityAnnotationElements());
	}
	
	public ParserRule getJpaEntityAnnotationRule() {
		return getJpaEntityAnnotationAccess().getRule();
	}

	//JpaPropertyAnnotation:
	//
	//	IdAnnotation | NullableAnnotation;
	public JpaPropertyAnnotationElements getJpaPropertyAnnotationAccess() {
		return (pJpaPropertyAnnotation != null) ? pJpaPropertyAnnotation : (pJpaPropertyAnnotation = new JpaPropertyAnnotationElements());
	}
	
	public ParserRule getJpaPropertyAnnotationRule() {
		return getJpaPropertyAnnotationAccess().getRule();
	}

	//JpaReferenceAnnotation:
	//
	//	ManyToManyAnnotation;
	public JpaReferenceAnnotationElements getJpaReferenceAnnotationAccess() {
		return (pJpaReferenceAnnotation != null) ? pJpaReferenceAnnotation : (pJpaReferenceAnnotation = new JpaReferenceAnnotationElements());
	}
	
	public ParserRule getJpaReferenceAnnotationRule() {
		return getJpaReferenceAnnotationAccess().getRule();
	}

	//EmbeddableAnnotation:
	//
	//	{EmbeddableAnnotation} "@" name="Embeddable";
	public EmbeddableAnnotationElements getEmbeddableAnnotationAccess() {
		return (pEmbeddableAnnotation != null) ? pEmbeddableAnnotation : (pEmbeddableAnnotation = new EmbeddableAnnotationElements());
	}
	
	public ParserRule getEmbeddableAnnotationRule() {
		return getEmbeddableAnnotationAccess().getRule();
	}

	//CachableAnnotation:
	//
	//	{CachableAnnotation} "@" name="Cachable";
	public CachableAnnotationElements getCachableAnnotationAccess() {
		return (pCachableAnnotation != null) ? pCachableAnnotation : (pCachableAnnotation = new CachableAnnotationElements());
	}
	
	public ParserRule getCachableAnnotationRule() {
		return getCachableAnnotationAccess().getRule();
	}

	//IdAnnotation:
	//
	//	{IdAnnotation} "@" name="ID";
	public IdAnnotationElements getIdAnnotationAccess() {
		return (pIdAnnotation != null) ? pIdAnnotation : (pIdAnnotation = new IdAnnotationElements());
	}
	
	public ParserRule getIdAnnotationRule() {
		return getIdAnnotationAccess().getRule();
	}

	//NullableAnnotation:
	//
	//	{NullableAnnotation} "@" name="Nullable";
	public NullableAnnotationElements getNullableAnnotationAccess() {
		return (pNullableAnnotation != null) ? pNullableAnnotation : (pNullableAnnotation = new NullableAnnotationElements());
	}
	
	public ParserRule getNullableAnnotationRule() {
		return getNullableAnnotationAccess().getRule();
	}

	//ManyToManyAnnotation:
	//
	//	{ManyToManyAnnotation} "@" name="ManyToMany" ("(" (("targetEntity=" targetEntity=JvmParameterizedTypeReference) ", "
	//
	//	"mappedBy=" mappedBy=ValidID)? ")")?;
	public ManyToManyAnnotationElements getManyToManyAnnotationAccess() {
		return (pManyToManyAnnotation != null) ? pManyToManyAnnotation : (pManyToManyAnnotation = new ManyToManyAnnotationElements());
	}
	
	public ParserRule getManyToManyAnnotationRule() {
		return getManyToManyAnnotationAccess().getRule();
	}

	//EntityModel:
	//
	//	package=Package & elements+=AbstractElement*;
	public EntityGrammarAccess.EntityModelElements getEntityModelAccess() {
		return gaEntity.getEntityModelAccess();
	}
	
	public ParserRule getEntityModelRule() {
		return getEntityModelAccess().getRule();
	}

	//Package:
	//
	//	"package" name=QualifiedName ";";
	public EntityGrammarAccess.PackageElements getPackageAccess() {
		return gaEntity.getPackageAccess();
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}

	//AbstractElement:
	//
	//	Import | Entity;
	public EntityGrammarAccess.AbstractElementElements getAbstractElementAccess() {
		return gaEntity.getAbstractElementAccess();
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//Import:
	//
	//	"import" importedNamespace=QualifiedNameWithWildCard ";";
	public EntityGrammarAccess.ImportElements getImportAccess() {
		return gaEntity.getImportAccess();
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//AbstractFeature:
	//
	//	Property | Reference | Operation;
	public EntityGrammarAccess.AbstractFeatureElements getAbstractFeatureAccess() {
		return gaEntity.getAbstractFeatureAccess();
	}
	
	public ParserRule getAbstractFeatureRule() {
		return getAbstractFeatureAccess().getRule();
	}

	//Operation:
	//
	//	operationAnnotation=XAnnotation? modifier=Modifier? "def" type=JvmTypeReference name=ValidID "("
	//
	//	(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" body=MyBlockExpression;
	public EntityGrammarAccess.OperationElements getOperationAccess() {
		return gaEntity.getOperationAccess();
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}

	//Modifier:
	//
	//	final?="final"? & static?="static"? & visibility=Visibility;
	public EntityGrammarAccess.ModifierElements getModifierAccess() {
		return gaEntity.getModifierAccess();
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//enum Visibility:
	//
	//	PACKAGE="package" | PRIVATE="private" | PROTECTED="protected" | PUBLIC="public";
	public EntityGrammarAccess.VisibilityElements getVisibilityAccess() {
		return gaEntity.getVisibilityAccess();
	}
	
	public EnumRule getVisibilityRule() {
		return getVisibilityAccess().getRule();
	}

	//enum RefType:
	//
	//	CONTAIN="contain" | EMBEDDED="embedded";
	public EntityGrammarAccess.RefTypeElements getRefTypeAccess() {
		return gaEntity.getRefTypeAccess();
	}
	
	public EnumRule getRefTypeRule() {
		return getRefTypeAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//
	//	QualifiedName ("." "*")?;
	public EntityGrammarAccess.QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return gaEntity.getQualifiedNameWithWildCardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//MyBlockExpression returns xbase::XExpression:
	//
	//	{xbase::XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";")* "}";
	public EntityGrammarAccess.MyBlockExpressionElements getMyBlockExpressionAccess() {
		return gaEntity.getMyBlockExpressionAccess();
	}
	
	public ParserRule getMyBlockExpressionRule() {
		return getMyBlockExpressionAccess().getRule();
	}

	//XAnnotation:
	//
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//
	//	value=XAnnotationElementValue)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaEntity.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//
	//	element=[types::JvmOperation|ValidID] "=" value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaEntity.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueStringConcatenation returns xbase::XExpression:
	//
	//	XAnnotationElementValue ({XAnnotationElementValueBinaryOperation.leftOperand=current} operator="+"
	//
	//	rightOperand=XAnnotationElementValue)*;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueStringConcatenationElements getXAnnotationElementValueStringConcatenationAccess() {
		return gaEntity.getXAnnotationElementValueStringConcatenationAccess();
	}
	
	public ParserRule getXAnnotationElementValueStringConcatenationRule() {
		return getXAnnotationElementValueStringConcatenationAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//
	//	XAnnotation | XAnnotationValueArray | XStringLiteral | XBooleanLiteral | XNumberLiteral | XTypeLiteral |
	//
	//	XAnnotationValueFieldReference | "(" XAnnotationElementValueStringConcatenation ")";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaEntity.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationValueFieldReference returns xbase::XExpression:
	//
	//	{xbase::XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]?
	//
	//	feature=[types::JvmIdentifiableElement|IdOrSuper];
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueFieldReferenceElements getXAnnotationValueFieldReferenceAccess() {
		return gaEntity.getXAnnotationValueFieldReferenceAccess();
	}
	
	public ParserRule getXAnnotationValueFieldReferenceRule() {
		return getXAnnotationValueFieldReferenceAccess().getRule();
	}

	//XAnnotationValueArray returns xbase::XExpression:
	//
	//	{XAnnotationValueArray} "{" values+=XAnnotationElementValue ("," values+=XAnnotationElementValue)* "}";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueArrayElements getXAnnotationValueArrayAccess() {
		return gaEntity.getXAnnotationValueArrayAccess();
	}
	
	public ParserRule getXAnnotationValueArrayRule() {
		return getXAnnotationValueArrayAccess().getRule();
	}

	//XExpression:
	//
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaEntity.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaEntity.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaEntity.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaEntity.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaEntity.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaEntity.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaEntity.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaEntity.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaEntity.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaEntity.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaEntity.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaEntity.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaEntity.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaEntity.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaEntity.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaEntity.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaEntity.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaEntity.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaEntity.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaEntity.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaEntity.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaEntity.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression |
	//
	//	XForLoopExpression | XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression |
	//
	//	XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaEntity.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaEntity.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaEntity.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaEntity.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaEntity.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaEntity.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaEntity.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaEntity.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaEntity.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaEntity.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaEntity.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaEntity.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaEntity.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaEntity.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaEntity.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaEntity.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaEntity.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaEntity.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaEntity.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//
	//
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//
	//
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	// StaticQualifier:
	//
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaEntity.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaEntity.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaEntity.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaEntity.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaEntity.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaEntity.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaEntity.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaEntity.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaEntity.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaEntity.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaEntity.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaEntity.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaEntity.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaEntity.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaEntity.getINTRule();
	} 

	//terminal DECIMAL:
	//
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaEntity.getDECIMALRule();
	} 

	//JvmTypeReference:
	//
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaEntity.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaEntity.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaEntity.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaEntity.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaEntity.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaEntity.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaEntity.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaEntity.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaEntity.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaEntity.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaEntity.getIDRule();
	} 

	//terminal STRING:
	//
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaEntity.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaEntity.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaEntity.getSL_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaEntity.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaEntity.getANY_OTHERRule();
	} 
}
