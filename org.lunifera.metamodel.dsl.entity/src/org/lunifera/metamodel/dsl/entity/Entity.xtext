grammar org.lunifera.metamodel.dsl.entity.Entity with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate lentity "http://www.lunifera.org/metamodel/dsl/entity/Entity"
import "http://www.eclipse.org/emf/2002/Ecore"
import "http://www.eclipse.org/emf/2002/GenModel" as genmodel
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

LEntityModel:
	package=LPackage &
	(imports+=LImport)* &
	(entity+=LEntity)*;

LPackage:
	{LPackage}
	'package' name=QualifiedName ';';

LImport:
	'import' importedNamespace=LQualifiedNameWithWildCard ';';

LEntity:
	'entity' name=ValidID ('extends' superType=JvmTypeReference)? '{'
	entityMembers+=LEntityMember* '}';

LEntityMember:
	LProperty |
	LReference |
	LReferenceJVM |
	LEmbedds |
	LOperation;

LReference:
	LRefers |
	LContains |
	LContainer;

LReferenceJVM:
	LRefersJVM |
	LContainsJVM;

LProperty:
	'var' type=JvmTypeReference name=ValidID ('=' defaultValueLiteral=STRING)? ';';

LRefers:
	{LRefers}
	'refers'
	type=[LEntity|LFQN]
	multiplicity=LMultiplicity?
	name=ValidID ';';

LContains:
	{LContains}
	'contains'
	type=[LEntity|LFQN]
	multiplicity=LMultiplicity?
	name=ValidID
	('opposite' opposite=[LReference|LFQN])? ';';

LContainer:
	{LContainer}
	'container'
	type=[LEntity|LFQN]
	multiplicity=LMultiplicity?
	name=ValidID
	('opposite' opposite=[LReference|LFQN])? ';';

LEmbedds:
	{LEmbedds}
	'embedds' type=[LEntity|LFQN] name=ValidID ';';

LRefersJVM:
	{LRefersJVM}
	'refersJVM'
	type=JvmTypeReference
	multiplicity=LMultiplicity?
	name=ValidID ';';

LContainsJVM:
	{LContainsJVM}
	'containsJVM'
	type=JvmTypeReference
	multiplicity=LMultiplicity?
	name=ValidID
	('opposite' opposite=[types::JvmField])? ';';

LOperation:
	(operationAnnotation+=XAnnotation)*
	(modifier=LModifier)?
	'def' type=JvmTypeReference name=ValidID '('
	(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' body=LBlockExpression;

LModifier:
	final?='final'? & static?='static'? & visibility=LVisibility;

enum LVisibility:
	PACKAGE='package' | PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';

LQualifiedNameWithWildCard:
	QualifiedName ('.' '*')?;

LFQN:
	ID ('.' ID)*;

LMultiplicity:
	{LMultiplicity}
	'['
	((INT | 'n') ('..') (INT | 'n'))?
	']';

LBlockExpression returns xbase::XExpression:
	{xbase::XBlockExpression} '{' (expressions+=XExpressionInsideBlock ';')* '}';

