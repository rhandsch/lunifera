/**
 * Copyright (c) 2011 - 2012, Florian Pirchner - lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * IP: ideas and semantics also used from Xbase and Xcore projects
 * 
 * Contributors:
 *    	Hans Georg Gl√∂ckler - initial implementation
 * 		Florian Pirchner - Xbase integration
 */
grammar org.lunifera.metamodel.dsl.entity.Entity with org.eclipse.xtext.xbase.annotations.XbaseWithAnnotations

generate entitymodel "http://www.lunifera.org/metamodel/dsl/entity/Entity"
import "http://www.eclipse.org/emf/2002/Ecore"
import "http://www.eclipse.org/emf/2002/GenModel" as genmodel
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.eclipse.org/Xtext/Xbase/XAnnotations"
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types

LEntityModel:
	package=LPackage
	(imports+=LImport)*
	(genSettings=LGenSettings)?
	(types+=LType)*;
	
LPackage:
	{LPackage}
	'package' name=QualifiedName;

LImport:
	'import' importedNamespace=LQualifiedNameWithWildCard;

LGenSettings:
	{LGenSettings}
	'settings {'
	((lifecycle?='checked lifecycle')? &
	(propertyChangeSupport?='add propertyChangeSupport')?)
	'}';
	
LType:
	LEntity | LEnum
;

LEntity:
	'entity' name=ValidID ('extends' superType=JvmTypeReference)? '{'
	entityMembers+=LEntityMember* '}';

LEntityMember:
	LProperty |
	LReference |
	LEmbedds |
	LOperation;

LReference:
	LRefers |
	LContains |
	LContainer;

LProperty:
	'var' type=JvmTypeReference name=ValidID ('=' defaultValueLiteral=STRING)?;

LRefers:
	{LRefers}
	'refers'
	type=[LEntity|LFQN]
	multiplicity=LMultiplicity?
	name=ValidID;

LContains:
	{LContains}
	'contains'
	type=[LEntity|LFQN]
	multiplicity=LMultiplicity?
	name=ValidID
	('opposite' opposite=[LContainer|LFQN])?;

LContainer:
	{LContainer}
	'container'
	type=[LEntity|LFQN]
	multiplicity=LMultiplicity?
	name=ValidID
	('opposite' opposite=[LContains|LFQN])?;

LEmbedds:
	{LEmbedds}
	'embedds' type=[LEntity|LFQN] name=ValidID;

LOperation:
	(operationAnnotation+=XAnnotation)*
	(modifier=LModifier)?
	'def' type=JvmTypeReference name=ValidID '('
	(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)? ')' body=XExpression;

LModifier:
	final?='final'? & static?='static'? & visibility=LVisibility;
	
LEnum:
	'enum' name = ID
	'{'
	  (literals+=LEnumLiteral ((',')? literals+=LEnumLiteral)*)?
	'}'
;

LEnumLiteral:
	{LEnumLiteral}
    name=ID 
;

enum LVisibility:
	PACKAGE='package' | PRIVATE='private' | PROTECTED='protected' | PUBLIC='public';

LQualifiedNameWithWildCard:
	QualifiedName ('.' '*')?;

LFQN:
	ID ('.' ID)*;

LMultiplicity returns LMultiplicity:
	{LMultiplicity}
	'['
	((lower=LowerBound) ('..' upper=UpperBound)?)?
	']';

enum LowerBound:
	MANY='*' | OPTIONAL='?' | ATLEASTONE='+' | ZERO='0' | ONE='1';

enum UpperBound:
	MANY='*' | ONE='1';
