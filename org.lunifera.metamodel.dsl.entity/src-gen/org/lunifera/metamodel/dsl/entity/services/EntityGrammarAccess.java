/*
* generated by Xtext
*/

package org.lunifera.metamodel.dsl.entity.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.annotations.services.XbaseWithAnnotationsGrammarAccess;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EntityGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class LEntityModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LEntityModel");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cPackageAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final RuleCall cPackageLPackageParserRuleCall_0_0 = (RuleCall)cPackageAssignment_0.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final RuleCall cImportsLImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		private final Assignment cEntityAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cEntityLEntityParserRuleCall_2_0 = (RuleCall)cEntityAssignment_2.eContents().get(0);
		
		//LEntityModel:
		//	package=LPackage & imports+=LImport* & entity+=LEntity*;
		public ParserRule getRule() { return rule; }

		//package=LPackage & imports+=LImport* & entity+=LEntity*
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//package=LPackage
		public Assignment getPackageAssignment_0() { return cPackageAssignment_0; }

		//LPackage
		public RuleCall getPackageLPackageParserRuleCall_0_0() { return cPackageLPackageParserRuleCall_0_0; }

		//imports+=LImport*
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }

		//LImport
		public RuleCall getImportsLImportParserRuleCall_1_0() { return cImportsLImportParserRuleCall_1_0; }

		//entity+=LEntity*
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }

		//LEntity
		public RuleCall getEntityLEntityParserRuleCall_2_0() { return cEntityLEntityParserRuleCall_2_0; }
	}

	public class LPackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LPackage");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//LPackage:
		//	{LPackage} "package" name=QualifiedName;
		public ParserRule getRule() { return rule; }

		//{LPackage} "package" name=QualifiedName
		public Group getGroup() { return cGroup; }

		//{LPackage}
		public Action getLPackageAction_0() { return cLPackageAction_0; }

		//"package"
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }
	}

	public class LImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LImport");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceLQualifiedNameWithWildCardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//LImport:
		//	"import" importedNamespace=LQualifiedNameWithWildCard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=LQualifiedNameWithWildCard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=LQualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//LQualifiedNameWithWildCard
		public RuleCall getImportedNamespaceLQualifiedNameWithWildCardParserRuleCall_1_0() { return cImportedNamespaceLQualifiedNameWithWildCardParserRuleCall_1_0; }
	}

	public class LEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEntityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypeJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cSuperTypeAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cEntityMembersAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cEntityMembersLEntityMemberParserRuleCall_4_0 = (RuleCall)cEntityMembersAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//LEntity:
		//	"entity" name=ValidID ("extends" superType=JvmTypeReference)? "{" entityMembers+=LEntityMember* "}";
		public ParserRule getRule() { return rule; }

		//"entity" name=ValidID ("extends" superType=JvmTypeReference)? "{" entityMembers+=LEntityMember* "}"
		public Group getGroup() { return cGroup; }

		//"entity"
		public Keyword getEntityKeyword_0() { return cEntityKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("extends" superType=JvmTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=JvmTypeReference
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//JvmTypeReference
		public RuleCall getSuperTypeJvmTypeReferenceParserRuleCall_2_1_0() { return cSuperTypeJvmTypeReferenceParserRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//entityMembers+=LEntityMember*
		public Assignment getEntityMembersAssignment_4() { return cEntityMembersAssignment_4; }

		//LEntityMember
		public RuleCall getEntityMembersLEntityMemberParserRuleCall_4_0() { return cEntityMembersLEntityMemberParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class LEntityMemberElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LEntityMember");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLPropertyParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLEmbeddsParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLOperationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//LEntityMember:
		//	LProperty | LReference | LEmbedds | LOperation;
		public ParserRule getRule() { return rule; }

		//LProperty | LReference | LEmbedds | LOperation
		public Alternatives getAlternatives() { return cAlternatives; }

		//LProperty
		public RuleCall getLPropertyParserRuleCall_0() { return cLPropertyParserRuleCall_0; }

		//LReference
		public RuleCall getLReferenceParserRuleCall_1() { return cLReferenceParserRuleCall_1; }

		//LEmbedds
		public RuleCall getLEmbeddsParserRuleCall_2() { return cLEmbeddsParserRuleCall_2; }

		//LOperation
		public RuleCall getLOperationParserRuleCall_3() { return cLOperationParserRuleCall_3; }
	}

	public class LReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLRefersParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLContainsParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLContainerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LReference:
		//	LRefers | LContains | LContainer;
		public ParserRule getRule() { return rule; }

		//LRefers | LContains | LContainer
		public Alternatives getAlternatives() { return cAlternatives; }

		//LRefers
		public RuleCall getLRefersParserRuleCall_0() { return cLRefersParserRuleCall_0; }

		//LContains
		public RuleCall getLContainsParserRuleCall_1() { return cLContainsParserRuleCall_1; }

		//LContainer
		public RuleCall getLContainerParserRuleCall_2() { return cLContainerParserRuleCall_2; }
	}

	public class LPropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LProperty");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDefaultValueLiteralAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cDefaultValueLiteralSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cDefaultValueLiteralAssignment_3_1.eContents().get(0);
		
		//LProperty:
		//	"var" type=JvmTypeReference name=ValidID ("=" defaultValueLiteral=STRING)?;
		public ParserRule getRule() { return rule; }

		//"var" type=JvmTypeReference name=ValidID ("=" defaultValueLiteral=STRING)?
		public Group getGroup() { return cGroup; }

		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("=" defaultValueLiteral=STRING)?
		public Group getGroup_3() { return cGroup_3; }

		//"="
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }

		//defaultValueLiteral=STRING
		public Assignment getDefaultValueLiteralAssignment_3_1() { return cDefaultValueLiteralAssignment_3_1; }

		//STRING
		public RuleCall getDefaultValueLiteralSTRINGTerminalRuleCall_3_1_0() { return cDefaultValueLiteralSTRINGTerminalRuleCall_3_1_0; }
	}

	public class LRefersElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LRefers");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLRefersAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRefersKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeLEntityCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeLEntityLFQNParserRuleCall_2_0_1 = (RuleCall)cTypeLEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicityLMultiplicityParserRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		
		//LRefers:
		//	{LRefers} "refers" type=[LEntity|LFQN] multiplicity=LMultiplicity? name=ValidID;
		public ParserRule getRule() { return rule; }

		//{LRefers} "refers" type=[LEntity|LFQN] multiplicity=LMultiplicity? name=ValidID
		public Group getGroup() { return cGroup; }

		//{LRefers}
		public Action getLRefersAction_0() { return cLRefersAction_0; }

		//"refers"
		public Keyword getRefersKeyword_1() { return cRefersKeyword_1; }

		//type=[LEntity|LFQN]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[LEntity|LFQN]
		public CrossReference getTypeLEntityCrossReference_2_0() { return cTypeLEntityCrossReference_2_0; }

		//LFQN
		public RuleCall getTypeLEntityLFQNParserRuleCall_2_0_1() { return cTypeLEntityLFQNParserRuleCall_2_0_1; }

		//multiplicity=LMultiplicity?
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }

		//LMultiplicity
		public RuleCall getMultiplicityLMultiplicityParserRuleCall_3_0() { return cMultiplicityLMultiplicityParserRuleCall_3_0; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }
	}

	public class LContainsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LContains");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLContainsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeLEntityCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeLEntityLFQNParserRuleCall_2_0_1 = (RuleCall)cTypeLEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicityLMultiplicityParserRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOppositeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOppositeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cOppositeLContainerCrossReference_5_1_0 = (CrossReference)cOppositeAssignment_5_1.eContents().get(0);
		private final RuleCall cOppositeLContainerLFQNParserRuleCall_5_1_0_1 = (RuleCall)cOppositeLContainerCrossReference_5_1_0.eContents().get(1);
		
		//LContains:
		//	{LContains} "contains" type=[LEntity|LFQN] multiplicity=LMultiplicity? name=ValidID ("opposite"
		//	opposite=[LContainer|LFQN])?;
		public ParserRule getRule() { return rule; }

		//{LContains} "contains" type=[LEntity|LFQN] multiplicity=LMultiplicity? name=ValidID ("opposite"
		//opposite=[LContainer|LFQN])?
		public Group getGroup() { return cGroup; }

		//{LContains}
		public Action getLContainsAction_0() { return cLContainsAction_0; }

		//"contains"
		public Keyword getContainsKeyword_1() { return cContainsKeyword_1; }

		//type=[LEntity|LFQN]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[LEntity|LFQN]
		public CrossReference getTypeLEntityCrossReference_2_0() { return cTypeLEntityCrossReference_2_0; }

		//LFQN
		public RuleCall getTypeLEntityLFQNParserRuleCall_2_0_1() { return cTypeLEntityLFQNParserRuleCall_2_0_1; }

		//multiplicity=LMultiplicity?
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }

		//LMultiplicity
		public RuleCall getMultiplicityLMultiplicityParserRuleCall_3_0() { return cMultiplicityLMultiplicityParserRuleCall_3_0; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//("opposite" opposite=[LContainer|LFQN])?
		public Group getGroup_5() { return cGroup_5; }

		//"opposite"
		public Keyword getOppositeKeyword_5_0() { return cOppositeKeyword_5_0; }

		//opposite=[LContainer|LFQN]
		public Assignment getOppositeAssignment_5_1() { return cOppositeAssignment_5_1; }

		//[LContainer|LFQN]
		public CrossReference getOppositeLContainerCrossReference_5_1_0() { return cOppositeLContainerCrossReference_5_1_0; }

		//LFQN
		public RuleCall getOppositeLContainerLFQNParserRuleCall_5_1_0_1() { return cOppositeLContainerLFQNParserRuleCall_5_1_0_1; }
	}

	public class LContainerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LContainer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLContainerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cContainerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeLEntityCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeLEntityLFQNParserRuleCall_2_0_1 = (RuleCall)cTypeLEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cMultiplicityAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMultiplicityLMultiplicityParserRuleCall_3_0 = (RuleCall)cMultiplicityAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOppositeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cOppositeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final CrossReference cOppositeLContainsCrossReference_5_1_0 = (CrossReference)cOppositeAssignment_5_1.eContents().get(0);
		private final RuleCall cOppositeLContainsLFQNParserRuleCall_5_1_0_1 = (RuleCall)cOppositeLContainsCrossReference_5_1_0.eContents().get(1);
		
		//LContainer:
		//	{LContainer} "container" type=[LEntity|LFQN] multiplicity=LMultiplicity? name=ValidID ("opposite"
		//	opposite=[LContains|LFQN])?;
		public ParserRule getRule() { return rule; }

		//{LContainer} "container" type=[LEntity|LFQN] multiplicity=LMultiplicity? name=ValidID ("opposite"
		//opposite=[LContains|LFQN])?
		public Group getGroup() { return cGroup; }

		//{LContainer}
		public Action getLContainerAction_0() { return cLContainerAction_0; }

		//"container"
		public Keyword getContainerKeyword_1() { return cContainerKeyword_1; }

		//type=[LEntity|LFQN]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[LEntity|LFQN]
		public CrossReference getTypeLEntityCrossReference_2_0() { return cTypeLEntityCrossReference_2_0; }

		//LFQN
		public RuleCall getTypeLEntityLFQNParserRuleCall_2_0_1() { return cTypeLEntityLFQNParserRuleCall_2_0_1; }

		//multiplicity=LMultiplicity?
		public Assignment getMultiplicityAssignment_3() { return cMultiplicityAssignment_3; }

		//LMultiplicity
		public RuleCall getMultiplicityLMultiplicityParserRuleCall_3_0() { return cMultiplicityLMultiplicityParserRuleCall_3_0; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//("opposite" opposite=[LContains|LFQN])?
		public Group getGroup_5() { return cGroup_5; }

		//"opposite"
		public Keyword getOppositeKeyword_5_0() { return cOppositeKeyword_5_0; }

		//opposite=[LContains|LFQN]
		public Assignment getOppositeAssignment_5_1() { return cOppositeAssignment_5_1; }

		//[LContains|LFQN]
		public CrossReference getOppositeLContainsCrossReference_5_1_0() { return cOppositeLContainsCrossReference_5_1_0; }

		//LFQN
		public RuleCall getOppositeLContainsLFQNParserRuleCall_5_1_0_1() { return cOppositeLContainsLFQNParserRuleCall_5_1_0_1; }
	}

	public class LEmbeddsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LEmbedds");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLEmbeddsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEmbeddsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeLEntityCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeLEntityLFQNParserRuleCall_2_0_1 = (RuleCall)cTypeLEntityCrossReference_2_0.eContents().get(1);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameValidIDParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		
		//LEmbedds:
		//	{LEmbedds} "embedds" type=[LEntity|LFQN] name=ValidID;
		public ParserRule getRule() { return rule; }

		//{LEmbedds} "embedds" type=[LEntity|LFQN] name=ValidID
		public Group getGroup() { return cGroup; }

		//{LEmbedds}
		public Action getLEmbeddsAction_0() { return cLEmbeddsAction_0; }

		//"embedds"
		public Keyword getEmbeddsKeyword_1() { return cEmbeddsKeyword_1; }

		//type=[LEntity|LFQN]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[LEntity|LFQN]
		public CrossReference getTypeLEntityCrossReference_2_0() { return cTypeLEntityCrossReference_2_0; }

		//LFQN
		public RuleCall getTypeLEntityLFQNParserRuleCall_2_0_1() { return cTypeLEntityLFQNParserRuleCall_2_0_1; }

		//name=ValidID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_3_0() { return cNameValidIDParserRuleCall_3_0; }
	}

	public class LOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperationAnnotationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperationAnnotationXAnnotationParserRuleCall_0_0 = (RuleCall)cOperationAnnotationAssignment_0.eContents().get(0);
		private final Assignment cModifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifierLModifierParserRuleCall_1_0 = (RuleCall)cModifierAssignment_1.eContents().get(0);
		private final Keyword cDefKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameValidIDParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cParamsAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_6_0_0 = (RuleCall)cParamsAssignment_6_0.eContents().get(0);
		private final Group cGroup_6_1 = (Group)cGroup_6.eContents().get(1);
		private final Keyword cCommaKeyword_6_1_0 = (Keyword)cGroup_6_1.eContents().get(0);
		private final Assignment cParamsAssignment_6_1_1 = (Assignment)cGroup_6_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_6_1_1_0 = (RuleCall)cParamsAssignment_6_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cBodyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cBodyLBlockExpressionParserRuleCall_8_0 = (RuleCall)cBodyAssignment_8.eContents().get(0);
		
		//LOperation:
		//	operationAnnotation+=XAnnotation* modifier=LModifier? "def" type=JvmTypeReference name=ValidID "("
		//	(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" body=LBlockExpression;
		public ParserRule getRule() { return rule; }

		//operationAnnotation+=XAnnotation* modifier=LModifier? "def" type=JvmTypeReference name=ValidID "("
		//(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" body=LBlockExpression
		public Group getGroup() { return cGroup; }

		//operationAnnotation+=XAnnotation*
		public Assignment getOperationAnnotationAssignment_0() { return cOperationAnnotationAssignment_0; }

		//XAnnotation
		public RuleCall getOperationAnnotationXAnnotationParserRuleCall_0_0() { return cOperationAnnotationXAnnotationParserRuleCall_0_0; }

		//modifier=LModifier?
		public Assignment getModifierAssignment_1() { return cModifierAssignment_1; }

		//LModifier
		public RuleCall getModifierLModifierParserRuleCall_1_0() { return cModifierLModifierParserRuleCall_1_0; }

		//"def"
		public Keyword getDefKeyword_2() { return cDefKeyword_2; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_3_0() { return cTypeJvmTypeReferenceParserRuleCall_3_0; }

		//name=ValidID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_4_0() { return cNameValidIDParserRuleCall_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }

		//(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
		public Group getGroup_6() { return cGroup_6; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_6_0() { return cParamsAssignment_6_0; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_6_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_6_0_0; }

		//("," params+=FullJvmFormalParameter)*
		public Group getGroup_6_1() { return cGroup_6_1; }

		//","
		public Keyword getCommaKeyword_6_1_0() { return cCommaKeyword_6_1_0; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_6_1_1() { return cParamsAssignment_6_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_6_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_6_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }

		//body=LBlockExpression
		public Assignment getBodyAssignment_8() { return cBodyAssignment_8; }

		//LBlockExpression
		public RuleCall getBodyLBlockExpressionParserRuleCall_8_0() { return cBodyLBlockExpressionParserRuleCall_8_0; }
	}

	public class LModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LModifier");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cFinalAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final Keyword cFinalFinalKeyword_0_0 = (Keyword)cFinalAssignment_0.eContents().get(0);
		private final Assignment cStaticAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final Keyword cStaticStaticKeyword_1_0 = (Keyword)cStaticAssignment_1.eContents().get(0);
		private final Assignment cVisibilityAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final RuleCall cVisibilityLVisibilityEnumRuleCall_2_0 = (RuleCall)cVisibilityAssignment_2.eContents().get(0);
		
		//LModifier:
		//	final?="final"? & static?="static"? & visibility=LVisibility;
		public ParserRule getRule() { return rule; }

		//final?="final"? & static?="static"? & visibility=LVisibility
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//final?="final"?
		public Assignment getFinalAssignment_0() { return cFinalAssignment_0; }

		//"final"
		public Keyword getFinalFinalKeyword_0_0() { return cFinalFinalKeyword_0_0; }

		//static?="static"?
		public Assignment getStaticAssignment_1() { return cStaticAssignment_1; }

		//"static"
		public Keyword getStaticStaticKeyword_1_0() { return cStaticStaticKeyword_1_0; }

		//visibility=LVisibility
		public Assignment getVisibilityAssignment_2() { return cVisibilityAssignment_2; }

		//LVisibility
		public RuleCall getVisibilityLVisibilityEnumRuleCall_2_0() { return cVisibilityLVisibilityEnumRuleCall_2_0; }
	}

	public class LQualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LQualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//LQualifiedNameWithWildCard:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class LFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//LFQN:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class LMultiplicityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LMultiplicity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLMultiplicityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cLowerAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cLowerLowerBoundEnumRuleCall_2_0_0 = (RuleCall)cLowerAssignment_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cUpperAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cUpperUpperBoundEnumRuleCall_2_2_0 = (RuleCall)cUpperAssignment_2_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LMultiplicity:
		//	{LMultiplicity} "[" (lower=LowerBound ".." upper=UpperBound)? "]";
		public ParserRule getRule() { return rule; }

		//{LMultiplicity} "[" (lower=LowerBound ".." upper=UpperBound)? "]"
		public Group getGroup() { return cGroup; }

		//{LMultiplicity}
		public Action getLMultiplicityAction_0() { return cLMultiplicityAction_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//(lower=LowerBound ".." upper=UpperBound)?
		public Group getGroup_2() { return cGroup_2; }

		//lower=LowerBound
		public Assignment getLowerAssignment_2_0() { return cLowerAssignment_2_0; }

		//LowerBound
		public RuleCall getLowerLowerBoundEnumRuleCall_2_0_0() { return cLowerLowerBoundEnumRuleCall_2_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2_1() { return cFullStopFullStopKeyword_2_1; }

		//upper=UpperBound
		public Assignment getUpperAssignment_2_2() { return cUpperAssignment_2_2; }

		//UpperBound
		public RuleCall getUpperUpperBoundEnumRuleCall_2_2_0() { return cUpperUpperBoundEnumRuleCall_2_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class LBlockExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LBlockExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXBlockExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cExpressionsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cExpressionsXExpressionInsideBlockParserRuleCall_2_0_0 = (RuleCall)cExpressionsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//LBlockExpression returns xbase::XExpression:
		//	{xbase::XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";")* "}";
		public ParserRule getRule() { return rule; }

		//{xbase::XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";")* "}"
		public Group getGroup() { return cGroup; }

		//{xbase::XBlockExpression}
		public Action getXBlockExpressionAction_0() { return cXBlockExpressionAction_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//(expressions+=XExpressionInsideBlock ";")*
		public Group getGroup_2() { return cGroup_2; }

		//expressions+=XExpressionInsideBlock
		public Assignment getExpressionsAssignment_2_0() { return cExpressionsAssignment_2_0; }

		//XExpressionInsideBlock
		public RuleCall getExpressionsXExpressionInsideBlockParserRuleCall_2_0_0() { return cExpressionsXExpressionInsideBlockParserRuleCall_2_0_0; }

		//";"
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	public class LVisibilityElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LVisibility");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPACKAGEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPACKAGEPackageKeyword_0_0 = (Keyword)cPACKAGEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPRIVATEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPRIVATEPrivateKeyword_1_0 = (Keyword)cPRIVATEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cPROTECTEDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cPROTECTEDProtectedKeyword_2_0 = (Keyword)cPROTECTEDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPUBLICEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPUBLICPublicKeyword_3_0 = (Keyword)cPUBLICEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum LVisibility:
		//	PACKAGE="package" | PRIVATE="private" | PROTECTED="protected" | PUBLIC="public";
		public EnumRule getRule() { return rule; }

		//PACKAGE="package" | PRIVATE="private" | PROTECTED="protected" | PUBLIC="public"
		public Alternatives getAlternatives() { return cAlternatives; }

		//PACKAGE="package"
		public EnumLiteralDeclaration getPACKAGEEnumLiteralDeclaration_0() { return cPACKAGEEnumLiteralDeclaration_0; }

		//"package"
		public Keyword getPACKAGEPackageKeyword_0_0() { return cPACKAGEPackageKeyword_0_0; }

		//PRIVATE="private"
		public EnumLiteralDeclaration getPRIVATEEnumLiteralDeclaration_1() { return cPRIVATEEnumLiteralDeclaration_1; }

		//"private"
		public Keyword getPRIVATEPrivateKeyword_1_0() { return cPRIVATEPrivateKeyword_1_0; }

		//PROTECTED="protected"
		public EnumLiteralDeclaration getPROTECTEDEnumLiteralDeclaration_2() { return cPROTECTEDEnumLiteralDeclaration_2; }

		//"protected"
		public Keyword getPROTECTEDProtectedKeyword_2_0() { return cPROTECTEDProtectedKeyword_2_0; }

		//PUBLIC="public"
		public EnumLiteralDeclaration getPUBLICEnumLiteralDeclaration_3() { return cPUBLICEnumLiteralDeclaration_3; }

		//"public"
		public Keyword getPUBLICPublicKeyword_3_0() { return cPUBLICPublicKeyword_3_0; }
	}

	public class LowerBoundElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LowerBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cZEROEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cZERO0Keyword_0_0 = (Keyword)cZEROEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cONEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cONE1Keyword_1_0 = (Keyword)cONEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum LowerBound:
		//	ZERO="0" | ONE="1";
		public EnumRule getRule() { return rule; }

		//ZERO="0" | ONE="1"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ZERO="0"
		public EnumLiteralDeclaration getZEROEnumLiteralDeclaration_0() { return cZEROEnumLiteralDeclaration_0; }

		//"0"
		public Keyword getZERO0Keyword_0_0() { return cZERO0Keyword_0_0; }

		//ONE="1"
		public EnumLiteralDeclaration getONEEnumLiteralDeclaration_1() { return cONEEnumLiteralDeclaration_1; }

		//"1"
		public Keyword getONE1Keyword_1_0() { return cONE1Keyword_1_0; }
	}

	public class UpperBoundElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UpperBound");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cONEEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cONE1Keyword_0_0 = (Keyword)cONEEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMANYEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMANYAsteriskKeyword_1_0 = (Keyword)cMANYEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UpperBound:
		//	ONE="1" | MANY="*";
		public EnumRule getRule() { return rule; }

		//ONE="1" | MANY="*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ONE="1"
		public EnumLiteralDeclaration getONEEnumLiteralDeclaration_0() { return cONEEnumLiteralDeclaration_0; }

		//"1"
		public Keyword getONE1Keyword_0_0() { return cONE1Keyword_0_0; }

		//MANY="*"
		public EnumLiteralDeclaration getMANYEnumLiteralDeclaration_1() { return cMANYEnumLiteralDeclaration_1; }

		//"*"
		public Keyword getMANYAsteriskKeyword_1_0() { return cMANYAsteriskKeyword_1_0; }
	}
	
	private LEntityModelElements pLEntityModel;
	private LPackageElements pLPackage;
	private LImportElements pLImport;
	private LEntityElements pLEntity;
	private LEntityMemberElements pLEntityMember;
	private LReferenceElements pLReference;
	private LPropertyElements pLProperty;
	private LRefersElements pLRefers;
	private LContainsElements pLContains;
	private LContainerElements pLContainer;
	private LEmbeddsElements pLEmbedds;
	private LOperationElements pLOperation;
	private LModifierElements pLModifier;
	private LVisibilityElements unknownRuleLVisibility;
	private LQualifiedNameWithWildCardElements pLQualifiedNameWithWildCard;
	private LFQNElements pLFQN;
	private LMultiplicityElements pLMultiplicity;
	private LBlockExpressionElements pLBlockExpression;
	private LowerBoundElements unknownRuleLowerBound;
	private UpperBoundElements unknownRuleUpperBound;
	
	private final Grammar grammar;

	private XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations;

	@Inject
	public EntityGrammarAccess(GrammarProvider grammarProvider,
		XbaseWithAnnotationsGrammarAccess gaXbaseWithAnnotations) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbaseWithAnnotations = gaXbaseWithAnnotations;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.lunifera.metamodel.dsl.entity.Entity".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseWithAnnotationsGrammarAccess getXbaseWithAnnotationsGrammarAccess() {
		return gaXbaseWithAnnotations;
	}

	
	//LEntityModel:
	//	package=LPackage & imports+=LImport* & entity+=LEntity*;
	public LEntityModelElements getLEntityModelAccess() {
		return (pLEntityModel != null) ? pLEntityModel : (pLEntityModel = new LEntityModelElements());
	}
	
	public ParserRule getLEntityModelRule() {
		return getLEntityModelAccess().getRule();
	}

	//LPackage:
	//	{LPackage} "package" name=QualifiedName;
	public LPackageElements getLPackageAccess() {
		return (pLPackage != null) ? pLPackage : (pLPackage = new LPackageElements());
	}
	
	public ParserRule getLPackageRule() {
		return getLPackageAccess().getRule();
	}

	//LImport:
	//	"import" importedNamespace=LQualifiedNameWithWildCard;
	public LImportElements getLImportAccess() {
		return (pLImport != null) ? pLImport : (pLImport = new LImportElements());
	}
	
	public ParserRule getLImportRule() {
		return getLImportAccess().getRule();
	}

	//LEntity:
	//	"entity" name=ValidID ("extends" superType=JvmTypeReference)? "{" entityMembers+=LEntityMember* "}";
	public LEntityElements getLEntityAccess() {
		return (pLEntity != null) ? pLEntity : (pLEntity = new LEntityElements());
	}
	
	public ParserRule getLEntityRule() {
		return getLEntityAccess().getRule();
	}

	//LEntityMember:
	//	LProperty | LReference | LEmbedds | LOperation;
	public LEntityMemberElements getLEntityMemberAccess() {
		return (pLEntityMember != null) ? pLEntityMember : (pLEntityMember = new LEntityMemberElements());
	}
	
	public ParserRule getLEntityMemberRule() {
		return getLEntityMemberAccess().getRule();
	}

	//LReference:
	//	LRefers | LContains | LContainer;
	public LReferenceElements getLReferenceAccess() {
		return (pLReference != null) ? pLReference : (pLReference = new LReferenceElements());
	}
	
	public ParserRule getLReferenceRule() {
		return getLReferenceAccess().getRule();
	}

	//LProperty:
	//	"var" type=JvmTypeReference name=ValidID ("=" defaultValueLiteral=STRING)?;
	public LPropertyElements getLPropertyAccess() {
		return (pLProperty != null) ? pLProperty : (pLProperty = new LPropertyElements());
	}
	
	public ParserRule getLPropertyRule() {
		return getLPropertyAccess().getRule();
	}

	//LRefers:
	//	{LRefers} "refers" type=[LEntity|LFQN] multiplicity=LMultiplicity? name=ValidID;
	public LRefersElements getLRefersAccess() {
		return (pLRefers != null) ? pLRefers : (pLRefers = new LRefersElements());
	}
	
	public ParserRule getLRefersRule() {
		return getLRefersAccess().getRule();
	}

	//LContains:
	//	{LContains} "contains" type=[LEntity|LFQN] multiplicity=LMultiplicity? name=ValidID ("opposite"
	//	opposite=[LContainer|LFQN])?;
	public LContainsElements getLContainsAccess() {
		return (pLContains != null) ? pLContains : (pLContains = new LContainsElements());
	}
	
	public ParserRule getLContainsRule() {
		return getLContainsAccess().getRule();
	}

	//LContainer:
	//	{LContainer} "container" type=[LEntity|LFQN] multiplicity=LMultiplicity? name=ValidID ("opposite"
	//	opposite=[LContains|LFQN])?;
	public LContainerElements getLContainerAccess() {
		return (pLContainer != null) ? pLContainer : (pLContainer = new LContainerElements());
	}
	
	public ParserRule getLContainerRule() {
		return getLContainerAccess().getRule();
	}

	//LEmbedds:
	//	{LEmbedds} "embedds" type=[LEntity|LFQN] name=ValidID;
	public LEmbeddsElements getLEmbeddsAccess() {
		return (pLEmbedds != null) ? pLEmbedds : (pLEmbedds = new LEmbeddsElements());
	}
	
	public ParserRule getLEmbeddsRule() {
		return getLEmbeddsAccess().getRule();
	}

	//LOperation:
	//	operationAnnotation+=XAnnotation* modifier=LModifier? "def" type=JvmTypeReference name=ValidID "("
	//	(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")" body=LBlockExpression;
	public LOperationElements getLOperationAccess() {
		return (pLOperation != null) ? pLOperation : (pLOperation = new LOperationElements());
	}
	
	public ParserRule getLOperationRule() {
		return getLOperationAccess().getRule();
	}

	//LModifier:
	//	final?="final"? & static?="static"? & visibility=LVisibility;
	public LModifierElements getLModifierAccess() {
		return (pLModifier != null) ? pLModifier : (pLModifier = new LModifierElements());
	}
	
	public ParserRule getLModifierRule() {
		return getLModifierAccess().getRule();
	}

	//enum LVisibility:
	//	PACKAGE="package" | PRIVATE="private" | PROTECTED="protected" | PUBLIC="public";
	public LVisibilityElements getLVisibilityAccess() {
		return (unknownRuleLVisibility != null) ? unknownRuleLVisibility : (unknownRuleLVisibility = new LVisibilityElements());
	}
	
	public EnumRule getLVisibilityRule() {
		return getLVisibilityAccess().getRule();
	}

	//LQualifiedNameWithWildCard:
	//	QualifiedName ("." "*")?;
	public LQualifiedNameWithWildCardElements getLQualifiedNameWithWildCardAccess() {
		return (pLQualifiedNameWithWildCard != null) ? pLQualifiedNameWithWildCard : (pLQualifiedNameWithWildCard = new LQualifiedNameWithWildCardElements());
	}
	
	public ParserRule getLQualifiedNameWithWildCardRule() {
		return getLQualifiedNameWithWildCardAccess().getRule();
	}

	//LFQN:
	//	ID ("." ID)*;
	public LFQNElements getLFQNAccess() {
		return (pLFQN != null) ? pLFQN : (pLFQN = new LFQNElements());
	}
	
	public ParserRule getLFQNRule() {
		return getLFQNAccess().getRule();
	}

	//LMultiplicity:
	//	{LMultiplicity} "[" (lower=LowerBound ".." upper=UpperBound)? "]";
	public LMultiplicityElements getLMultiplicityAccess() {
		return (pLMultiplicity != null) ? pLMultiplicity : (pLMultiplicity = new LMultiplicityElements());
	}
	
	public ParserRule getLMultiplicityRule() {
		return getLMultiplicityAccess().getRule();
	}

	//LBlockExpression returns xbase::XExpression:
	//	{xbase::XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";")* "}";
	public LBlockExpressionElements getLBlockExpressionAccess() {
		return (pLBlockExpression != null) ? pLBlockExpression : (pLBlockExpression = new LBlockExpressionElements());
	}
	
	public ParserRule getLBlockExpressionRule() {
		return getLBlockExpressionAccess().getRule();
	}

	//enum LowerBound:
	//	ZERO="0" | ONE="1";
	public LowerBoundElements getLowerBoundAccess() {
		return (unknownRuleLowerBound != null) ? unknownRuleLowerBound : (unknownRuleLowerBound = new LowerBoundElements());
	}
	
	public EnumRule getLowerBoundRule() {
		return getLowerBoundAccess().getRule();
	}

	//enum UpperBound:
	//	ONE="1" | MANY="*";
	public UpperBoundElements getUpperBoundAccess() {
		return (unknownRuleUpperBound != null) ? unknownRuleUpperBound : (unknownRuleUpperBound = new UpperBoundElements());
	}
	
	public EnumRule getUpperBoundRule() {
		return getUpperBoundAccess().getRule();
	}

	//XAnnotation:
	//	{XAnnotation} "@" annotationType=[types::JvmAnnotationType|QualifiedName] ("("
	//	(elementValuePairs+=XAnnotationElementValuePair ("," elementValuePairs+=XAnnotationElementValuePair)* |
	//	value=XAnnotationElementValue)? ")")?;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElements getXAnnotationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationAccess();
	}
	
	public ParserRule getXAnnotationRule() {
		return getXAnnotationAccess().getRule();
	}

	//XAnnotationElementValuePair:
	//	element=[types::JvmOperation|ValidID] "=" value=XAnnotationElementValue;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValuePairElements getXAnnotationElementValuePairAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValuePairAccess();
	}
	
	public ParserRule getXAnnotationElementValuePairRule() {
		return getXAnnotationElementValuePairAccess().getRule();
	}

	//XAnnotationElementValueStringConcatenation returns xbase::XExpression:
	//	XAnnotationElementValue ({XAnnotationElementValueBinaryOperation.leftOperand=current} operator="+"
	//	rightOperand=XAnnotationElementValue)*;
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueStringConcatenationElements getXAnnotationElementValueStringConcatenationAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueStringConcatenationAccess();
	}
	
	public ParserRule getXAnnotationElementValueStringConcatenationRule() {
		return getXAnnotationElementValueStringConcatenationAccess().getRule();
	}

	//XAnnotationElementValue returns xbase::XExpression:
	//	XAnnotation | XAnnotationValueArray | XStringLiteral | XBooleanLiteral | XNumberLiteral | XTypeLiteral |
	//	XAnnotationValueFieldReference | "(" XAnnotationElementValueStringConcatenation ")";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationElementValueElements getXAnnotationElementValueAccess() {
		return gaXbaseWithAnnotations.getXAnnotationElementValueAccess();
	}
	
	public ParserRule getXAnnotationElementValueRule() {
		return getXAnnotationElementValueAccess().getRule();
	}

	//XAnnotationValueFieldReference returns xbase::XExpression:
	//	{xbase::XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper];
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueFieldReferenceElements getXAnnotationValueFieldReferenceAccess() {
		return gaXbaseWithAnnotations.getXAnnotationValueFieldReferenceAccess();
	}
	
	public ParserRule getXAnnotationValueFieldReferenceRule() {
		return getXAnnotationValueFieldReferenceAccess().getRule();
	}

	//XAnnotationValueArray returns xbase::XExpression:
	//	{XAnnotationValueArray} "{" values+=XAnnotationElementValue ("," values+=XAnnotationElementValue)* "}";
	public XbaseWithAnnotationsGrammarAccess.XAnnotationValueArrayElements getXAnnotationValueArrayAccess() {
		return gaXbaseWithAnnotations.getXAnnotationValueArrayAccess();
	}
	
	public ParserRule getXAnnotationValueArrayRule() {
		return getXAnnotationValueArrayAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbaseWithAnnotations.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbaseWithAnnotations.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbaseWithAnnotations.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbaseWithAnnotations.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbaseWithAnnotations.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbaseWithAnnotations.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbaseWithAnnotations.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbaseWithAnnotations.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbaseWithAnnotations.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbaseWithAnnotations.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbaseWithAnnotations.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbaseWithAnnotations.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbaseWithAnnotations.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbaseWithAnnotations.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbaseWithAnnotations.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbaseWithAnnotations.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbaseWithAnnotations.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbaseWithAnnotations.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbaseWithAnnotations.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbaseWithAnnotations.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbaseWithAnnotations.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbaseWithAnnotations.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbaseWithAnnotations.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbaseWithAnnotations.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbaseWithAnnotations.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbaseWithAnnotations.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbaseWithAnnotations.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbaseWithAnnotations.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbaseWithAnnotations.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbaseWithAnnotations.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbaseWithAnnotations.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbaseWithAnnotations.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbaseWithAnnotations.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbaseWithAnnotations.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbaseWithAnnotations.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbaseWithAnnotations.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbaseWithAnnotations.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbaseWithAnnotations.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbaseWithAnnotations.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbaseWithAnnotations.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbaseWithAnnotations.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbaseWithAnnotations.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbaseWithAnnotations.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbaseWithAnnotations.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbaseWithAnnotations.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbaseWithAnnotations.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbaseWithAnnotations.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbaseWithAnnotations.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbaseWithAnnotations.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbaseWithAnnotations.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbaseWithAnnotations.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbaseWithAnnotations.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbaseWithAnnotations.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbaseWithAnnotations.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbaseWithAnnotations.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbaseWithAnnotations.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbaseWithAnnotations.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbaseWithAnnotations.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbaseWithAnnotations.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbaseWithAnnotations.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbaseWithAnnotations.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbaseWithAnnotations.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbaseWithAnnotations.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbaseWithAnnotations.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbaseWithAnnotations.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbaseWithAnnotations.getANY_OTHERRule();
	} 
}
