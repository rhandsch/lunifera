/**
 * Copyright (c) 2011 - 2012, Florian Pirchner - lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Sources generated by Xtext
 * 
 * Contributions:
 * 		Hans Georg Gl√∂ckler - Initial implementation
 * 		Florian Pirchner - Initial implementation
 */
package org.lunifera.metamodel.dsl.entity.ui.contentassist;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.common.types.xtext.ui.JdtVariableCompletions;
import org.eclipse.xtext.conversion.impl.QualifiedNameValueConverter;
import org.eclipse.xtext.naming.IQualifiedNameConverter;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.IScopeProvider;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal;
import org.eclipse.xtext.ui.editor.contentassist.ConfigurableCompletionProposal.IReplacementTextApplier;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.lunifera.metamodel.dsl.entity.entitymodel.EntitymodelPackage;
import org.lunifera.metamodel.dsl.entity.entitymodel.LContainer;
import org.lunifera.metamodel.dsl.entity.entitymodel.LContains;
import org.lunifera.metamodel.dsl.entity.entitymodel.LRefers;
import org.lunifera.metamodel.dsl.entity.services.EntityGrammarAccess;

import com.google.inject.Inject;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
@SuppressWarnings("restriction")
public class EntityProposalProvider extends AbstractEntityProposalProvider {
	@Inject
	IScopeProvider entityScopeProvider;

	@Inject
	private IQualifiedNameConverter qualifiedNameConverter;

	@Inject
	QualifiedNameValueConverter qualifiedNameValueConverter;

	@Inject
	EntityGrammarAccess xcoreGrammarAccess;

	@Inject
	private JdtVariableCompletions completions;

	@Override
	public void completeEntityMember_Opposite(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof LContains) {
			final IReplacementTextApplier textApplier = new OppositeReplacementTextApplier(
					(LContains) model, context.getViewer(),
					entityScopeProvider.getScope(model,
							EntitymodelPackage.Literals.LCONTAINS__OPPOSITE),
					qualifiedNameConverter, qualifiedNameValueConverter);
			ICompletionProposalAcceptor oppositeAware = new ICompletionProposalAcceptor.Delegate(
					acceptor) {
				@Override
				public void accept(ICompletionProposal proposal) {
					if (proposal instanceof ConfigurableCompletionProposal
							&& textApplier != null) {
						((ConfigurableCompletionProposal) proposal)
								.setTextApplier(textApplier);
					}
					super.accept(proposal);
				}
			};
			super.completeEntityMember_Opposite(model, assignment, context,
					oppositeAware);
		} else if (model instanceof LContainer) {
			IScope scope = entityScopeProvider.getScope(model,
					EntitymodelPackage.Literals.LCONTAINER__OPPOSITE);

			final IReplacementTextApplier textApplier = new OppositeReplacementTextApplier(
					(LContainer) model, context.getViewer(), scope,
					qualifiedNameConverter, qualifiedNameValueConverter);
			ICompletionProposalAcceptor oppositeAware = new ICompletionProposalAcceptor.Delegate(
					acceptor) {
				@Override
				public void accept(ICompletionProposal proposal) {
					if (proposal instanceof ConfigurableCompletionProposal
							&& textApplier != null) {
						((ConfigurableCompletionProposal) proposal)
								.setTextApplier(textApplier);
					}
					super.accept(proposal);
				}
			};
			super.completeEntityMember_Opposite(model, assignment, context,
					oppositeAware);
		} else if (model instanceof LRefers) {
			IScope scope = entityScopeProvider.getScope(model,
					EntitymodelPackage.Literals.LREFERS__OPPOSITE);
			final IReplacementTextApplier textApplier = new OppositeReplacementTextApplier(
					(LRefers) model, context.getViewer(), scope,
					qualifiedNameConverter, qualifiedNameValueConverter);
			ICompletionProposalAcceptor oppositeAware = new ICompletionProposalAcceptor.Delegate(
					acceptor) {
				@Override
				public void accept(ICompletionProposal proposal) {
					if (proposal instanceof ConfigurableCompletionProposal
							&& textApplier != null) {
						((ConfigurableCompletionProposal) proposal)
								.setTextApplier(textApplier);
					}
					super.accept(proposal);
				}
			};
			super.completeEntityMember_Opposite(model, assignment, context,
					oppositeAware);
		}
	}
}