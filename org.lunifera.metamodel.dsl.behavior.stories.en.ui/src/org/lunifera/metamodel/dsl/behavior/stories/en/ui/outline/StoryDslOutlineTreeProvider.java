/*******************************************************************************
 * Copyright (c) 2011, 2012 Cristiano Gavião - Lunifera.org.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Cristiano Gavião - initial API and implementation
 *******************************************************************************/
/*
 * generated by Xtext
 */
package org.lunifera.metamodel.dsl.behavior.stories.en.ui.outline;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;
import org.lunifera.metamodel.dsl.behavior.stories.en.storyDsl.AbstractStep;
import org.lunifera.metamodel.dsl.behavior.stories.en.storyDsl.AndStep;
import org.lunifera.metamodel.dsl.behavior.stories.en.storyDsl.Examples;

/**
 * customization of the default outline structure
 * 
 */
public class StoryDslOutlineTreeProvider extends DefaultOutlineTreeProvider {

	protected void _createChildren(EObjectNode parentNode, AbstractStep model) {
		if (model.getAnds() != null && !model.getAnds().isEmpty()) {
			for (EObject childElement : model.getAnds())
				createNode(parentNode, childElement);
		} else {
			return;
		}
	}

	
//	protected void _createNode(IOutlineNode parentNode, AbstractStep model) {
//		
//	}
	protected void _createChildren(EObjectNode parentNode, AndStep model) {
		
	}

	@Override
	public void createChildren(IOutlineNode parent, EObject modelElement) {
		// TODO Auto-generated method stub
		super.createChildren(parent, modelElement);
	}

	protected boolean _isLeaf(AbstractStep modelElement) {

		if (modelElement.getAnds() != null && !modelElement.getAnds().isEmpty()) {
			return false;
		} else {
			return true;
		}
	}

	protected boolean _isLeaf(Examples modelElement) {

		return true;

	}

	protected boolean _isLeaf(AndStep modelElement) {

		return true;

	}
}
