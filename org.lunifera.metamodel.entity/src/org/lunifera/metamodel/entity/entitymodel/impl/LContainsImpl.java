/**
 * Copyright (c) 2011 - 2012, Florian Pirchner - lunifera.org
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Sources generated by Xtext  
 * 
 * Contributors:
 *  		Hans Georg Gl√∂ckler - Initial implementation
 *  		Florian Pirchner - Initial implementation
 */
package org.lunifera.metamodel.entity.entitymodel.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.lunifera.metamodel.entity.entitymodel.EntitymodelPackage;
import org.lunifera.metamodel.entity.entitymodel.LContainer;
import org.lunifera.metamodel.entity.entitymodel.LContains;
import org.lunifera.metamodel.entity.entitymodel.LMultiplicity;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>LContains</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.lunifera.metamodel.entity.entitymodel.impl.LContainsImpl#isNotnull <em>Notnull</em>}</li>
 *   <li>{@link org.lunifera.metamodel.entity.entitymodel.impl.LContainsImpl#getMultiplicity <em>Multiplicity</em>}</li>
 *   <li>{@link org.lunifera.metamodel.entity.entitymodel.impl.LContainsImpl#getOpposite <em>Opposite</em>}</li>
 *   <li>{@link org.lunifera.metamodel.entity.entitymodel.impl.LContainsImpl#getSingularName <em>Singular Name</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class LContainsImpl extends LReferenceImpl implements LContains {
	/**
	 * The default value of the '{@link #isNotnull() <em>Notnull</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isNotnull()
	 * @generated
	 * @ordered
	 */
	protected static final boolean NOTNULL_EDEFAULT = false;

	/**
	 * The cached value of the '{@link #isNotnull() <em>Notnull</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #isNotnull()
	 * @generated
	 * @ordered
	 */
	protected boolean notnull = NOTNULL_EDEFAULT;

	/**
	 * The cached value of the '{@link #getMultiplicity() <em>Multiplicity</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getMultiplicity()
	 * @generated
	 * @ordered
	 */
	protected LMultiplicity multiplicity;

	/**
	 * The cached value of the '{@link #getOpposite() <em>Opposite</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getOpposite()
	 * @generated
	 * @ordered
	 */
	protected LContainer opposite;

	/**
	 * The default value of the '{@link #getSingularName() <em>Singular Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSingularName()
	 * @generated
	 * @ordered
	 */
	protected static final String SINGULAR_NAME_EDEFAULT = null;

	/**
	 * The cached value of the '{@link #getSingularName() <em>Singular Name</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSingularName()
	 * @generated
	 * @ordered
	 */
	protected String singularName = SINGULAR_NAME_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LContainsImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return EntitymodelPackage.Literals.LCONTAINS;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public boolean isNotnull() {
		return notnull;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setNotnull(boolean newNotnull) {
		boolean oldNotnull = notnull;
		notnull = newNotnull;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, EntitymodelPackage.LCONTAINS__NOTNULL, oldNotnull, notnull));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LMultiplicity getMultiplicity() {
		return multiplicity;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetMultiplicity(LMultiplicity newMultiplicity, NotificationChain msgs) {
		LMultiplicity oldMultiplicity = multiplicity;
		multiplicity = newMultiplicity;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EntitymodelPackage.LCONTAINS__MULTIPLICITY, oldMultiplicity, newMultiplicity);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setMultiplicity(LMultiplicity newMultiplicity) {
		if (newMultiplicity != multiplicity) {
			NotificationChain msgs = null;
			if (multiplicity != null)
				msgs = ((InternalEObject)multiplicity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EntitymodelPackage.LCONTAINS__MULTIPLICITY, null, msgs);
			if (newMultiplicity != null)
				msgs = ((InternalEObject)newMultiplicity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EntitymodelPackage.LCONTAINS__MULTIPLICITY, null, msgs);
			msgs = basicSetMultiplicity(newMultiplicity, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, EntitymodelPackage.LCONTAINS__MULTIPLICITY, newMultiplicity, newMultiplicity));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LContainer getOpposite() {
		if (opposite != null && opposite.eIsProxy()) {
			InternalEObject oldOpposite = (InternalEObject)opposite;
			opposite = (LContainer)eResolveProxy(oldOpposite);
			if (opposite != oldOpposite) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, EntitymodelPackage.LCONTAINS__OPPOSITE, oldOpposite, opposite));
			}
		}
		return opposite;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public LContainer basicGetOpposite() {
		return opposite;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setOpposite(LContainer newOpposite) {
		LContainer oldOpposite = opposite;
		opposite = newOpposite;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, EntitymodelPackage.LCONTAINS__OPPOSITE, oldOpposite, opposite));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public String getSingularName() {
		return singularName;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSingularName(String newSingularName) {
		String oldSingularName = singularName;
		singularName = newSingularName;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, EntitymodelPackage.LCONTAINS__SINGULAR_NAME, oldSingularName, singularName));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case EntitymodelPackage.LCONTAINS__MULTIPLICITY:
				return basicSetMultiplicity(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case EntitymodelPackage.LCONTAINS__NOTNULL:
				return isNotnull();
			case EntitymodelPackage.LCONTAINS__MULTIPLICITY:
				return getMultiplicity();
			case EntitymodelPackage.LCONTAINS__OPPOSITE:
				if (resolve) return getOpposite();
				return basicGetOpposite();
			case EntitymodelPackage.LCONTAINS__SINGULAR_NAME:
				return getSingularName();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case EntitymodelPackage.LCONTAINS__NOTNULL:
				setNotnull((Boolean)newValue);
				return;
			case EntitymodelPackage.LCONTAINS__MULTIPLICITY:
				setMultiplicity((LMultiplicity)newValue);
				return;
			case EntitymodelPackage.LCONTAINS__OPPOSITE:
				setOpposite((LContainer)newValue);
				return;
			case EntitymodelPackage.LCONTAINS__SINGULAR_NAME:
				setSingularName((String)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case EntitymodelPackage.LCONTAINS__NOTNULL:
				setNotnull(NOTNULL_EDEFAULT);
				return;
			case EntitymodelPackage.LCONTAINS__MULTIPLICITY:
				setMultiplicity((LMultiplicity)null);
				return;
			case EntitymodelPackage.LCONTAINS__OPPOSITE:
				setOpposite((LContainer)null);
				return;
			case EntitymodelPackage.LCONTAINS__SINGULAR_NAME:
				setSingularName(SINGULAR_NAME_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case EntitymodelPackage.LCONTAINS__NOTNULL:
				return notnull != NOTNULL_EDEFAULT;
			case EntitymodelPackage.LCONTAINS__MULTIPLICITY:
				return multiplicity != null;
			case EntitymodelPackage.LCONTAINS__OPPOSITE:
				return opposite != null;
			case EntitymodelPackage.LCONTAINS__SINGULAR_NAME:
				return SINGULAR_NAME_EDEFAULT == null ? singularName != null : !SINGULAR_NAME_EDEFAULT.equals(singularName);
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (notnull: ");
		result.append(notnull);
		result.append(", singularName: ");
		result.append(singularName);
		result.append(')');
		return result.toString();
	}

} //LContainsImpl
