/*******************************************************************************
 * Copyright (c) 2011, 2012 Cristiano Gavião - Lunifera.org.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Cristiano Gavião - initial API and implementation
 *******************************************************************************/
/*
 * generated by Xtext
 */
package org.lunifera.metamodel.dsl.organization.en.scoping;

import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.FilteringScope;
import org.lunifera.metamodel.dsl.organization.en.organizationDsl.BusinessRole;
import org.lunifera.metamodel.dsl.organization.en.organizationDsl.Organization;
import org.lunifera.metamodel.dsl.organization.en.organizationDsl.OrganizationDslPackage;
import org.lunifera.metamodel.dsl.organization.en.organizationDsl.OrganizationUnit;
import org.lunifera.metamodel.dsl.organization.en.organizationDsl.Person;
import org.lunifera.metamodel.dsl.organization.en.organizationDsl.Position;
import org.lunifera.metamodel.dsl.organization.en.organizationDsl.Worker;

import com.google.common.base.Predicate;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class OrganizationDslScopeProvider extends
		AbstractDeclarativeScopeProvider {

	public IScope scope_Partnership_responsible(Organization context,
			EReference reference) {
		IScope scope = delegateGetScope(context, reference);
		final String orgNameToFix = context.getName();

		return new FilteringScope(scope, new Predicate<IEObjectDescription>() {
			public boolean apply(IEObjectDescription input) {
				if (input != null
						&& input.getEObjectOrProxy() instanceof Worker
						&& input.getEObjectOrProxy().eContainer() != null) {
					return input
							.getEObjectOrProxy()
							.eContainer()
							.eGet(OrganizationDslPackage.eINSTANCE
									.getOrganization_Name())
							.equals(orgNameToFix);
				}
				return false;
			};
		});
	}

	public IScope scope_Partnership_company(Organization context,
			EReference reference) {
		IScope scope = delegateGetScope(context, reference);
		final String orgNameToExclude = context.getName();

		return new FilteringScope(scope, new Predicate<IEObjectDescription>() {
			public boolean apply(IEObjectDescription input) {
				return input != null
						&& input.getName() != null
						&& !(input.getName().toString()
								.equals(orgNameToExclude));
			};
		});
	}

	public IScope scope_Worker_personRoles(Organization context,
			EReference reference) {
		IScope scope = delegateGetScope(context, reference);
		final String orgNameToFix = context.getName();

		return new FilteringScope(scope, new Predicate<IEObjectDescription>() {
			public boolean apply(IEObjectDescription input) {
				if (input != null
						&& input.getEObjectOrProxy() instanceof BusinessRole
						&& input.getEObjectOrProxy().eContainer() != null) {
					return input
							.getEObjectOrProxy()
							.eContainer()
							.eGet(OrganizationDslPackage.eINSTANCE
									.getOrganization_Name())
							.equals(orgNameToFix);
				}
				return false;
			};
		});
	}

	public IScope scope_Worker_person(Organization context, EReference reference) {
		IScope scope = delegateGetScope(context, reference);
		final String orgNameToFix = context.getName();

		return new FilteringScope(scope, new Predicate<IEObjectDescription>() {
			public boolean apply(IEObjectDescription input) {
				if (input != null
						&& input.getEObjectOrProxy() instanceof Person
						&& input.getEObjectOrProxy().eContainer() != null) {
					return input
							.getEObjectOrProxy()
							.eContainer()
							.eGet(OrganizationDslPackage.eINSTANCE
									.getOrganization_Name())
							.equals(orgNameToFix);
				}
				return false;
			};
		});
	}

	public IScope scope_Worker_allocationUnit(Organization context,
			EReference reference) {
		IScope scope = delegateGetScope(context, reference);
		final String orgNameToFix = context.getName();

		return new FilteringScope(scope, new Predicate<IEObjectDescription>() {
			public boolean apply(IEObjectDescription input) {
				if (input != null && input.getEObjectOrProxy() instanceof OrganizationUnit
						&& input.getEObjectOrProxy().eContainer() != null) {
					return input
							.getEObjectOrProxy()
							.eContainer()
							.eGet(OrganizationDslPackage.eINSTANCE
									.getOrganization_Name())
							.equals(orgNameToFix);
				}
				return false;
			};
		});
	}

	public IScope scope_Worker_position(Organization context,
			EReference reference) {
		IScope scope = delegateGetScope(context, reference);
		final String orgNameToFix = context.getName();

		return new FilteringScope(scope, new Predicate<IEObjectDescription>() {
			public boolean apply(IEObjectDescription input) {
				if (input != null
						&& input.getEObjectOrProxy() instanceof Position
						&& input.getEObjectOrProxy().eContainer() != null) {
					return input
							.getEObjectOrProxy()
							.eContainer()
							.eGet(OrganizationDslPackage.eINSTANCE
									.getOrganization_Name())
							.equals(orgNameToFix);
				}
				return false;
			};
		});
	}
}
