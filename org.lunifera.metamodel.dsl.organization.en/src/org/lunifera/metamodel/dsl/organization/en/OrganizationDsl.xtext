grammar org.lunifera.metamodel.dsl.organization.en.OrganizationDsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate organizationDsl "http://www.lunifera.org/metamodel/dsl/organization/en/OrganizationDsl"

Organization:
	
 	('code' name=Fqn
 	('name' longname=STRING)?
	('description' description=STRING)?
	)
	(
		(unitSet = OrganizationUnitSet)? &
		(roleSet = RoleSet)? &
		(personSet = PersonSet)? &
		(workerSet = WorkerSet)? &
		(partnershipSet = PartnershipSet)?
	)
;
	

OrganizationUnitSet:
	{OrganizationUnitSet}
	'Units:' '{'
		(units+=OrganizationUnit (units+=OrganizationUnit)*)
		'}'
;

PersonSet:
	{PersonSet}
	'People:' '{'(people+=Person (people+=Person)*)'}'
;

WorkerSet:
	{WorkerSet}
	'Workers:' '{'(workers+=Worker (workers+=Worker)*)'}'
;

PartnershipSet:
	{PartnershipSet}
	'Partnerships:' '{'(partnerships+=Partnership (partnerships+=Partnership)*)'}'
;

RoleSet:
	{RoleSet}
	'Business Roles:' '{'(roles+=BusinessRole (roles+=BusinessRole)*)'}'
;

OrganizationUnit:
	{OrganizationUnit}
	'unit' 'id' name=Fqn
	('{' 
		(
			('parent' parent = [OrganizationUnit|Fqn])? &
			('name' longName=STRING)? &
			('description' description=STRING)? &
			('type' type=STRING)? 
		)
			
	'}')?
;

BusinessRole:
	{BusinessRole}
	'role' 'id' name=Fqn
	('{'
		('name' longname=STRING)?
		('description' description=STRING)?
	'}')?
;

Person:
	{Person}
	'person' 'id' name=ID
	('{'
		(
			('first name' firstName=STRING)? &
			('middle name' middleName=STRING)? &
			('last name' lastName=STRING)? &
			('email' email=STRING)?
		)
	'}')?
;

Worker:
	{Worker}
	// must filter persons. must show only Partners and Own Company persons.
	'worker' 'person' person=[Person|Fqn]
	('{'
		(
			('allocatedOn' allocationUnit=[OrganizationUnit|Fqn])? &
			('playRoles' playRoles+=[BusinessRole|Fqn] (',' playRoles+=[BusinessRole|Fqn])* )?
		)
	'}')?
;

Partnership:
	{Partnership}
	'partnership' 'company' company=[Organization|Fqn]
	('{'
		('responsible' responsible=[Worker|Fqn])? &
		('agreement' agreement=STRING)?
	'}')?
;


FqnWithWildCard:
	Fqn ('.' '*')?;

Fqn:
  ValidID (=>'.' ValidID)*;
  
ValidID:
	ID;
