grammar org.lunifera.metamodel.dsl.behavior.stories.en.StoryDsl hidden(WS, NEWLINE, SL_COMMENT)
	

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.lunifera.org/metamodel/dsl/organization/en/OrganizationDsl" as org
import "http://www.lunifera.org/metamodel/dsl/software/composition/CompositeModelDsl" as composite
import "http://www.lunifera.org/metamodel/dsl/business/processes/BpModelDsl" as process
import "http://www.lunifera.org/metamodel/entity/Entity" as entity
generate storyDsl "http://www.lunifera.org/metamodel/dsl/behavior/stories/en/StoryDsl"

Story:
	description+=Description?
	meta=Meta?
	narrative=Narrative?
	scenarios+=Scenario*;


//ImportNamespace returns ImportNamespace :
//	'Import' importedNamespace=FqnWithWildCard
//;

Narrative:
	'Narrative:'
	((inOrderTo=InOrderTo?) &
	(asA=AsA?) &
	iWantTo=IWantTo);

Scenario:
	{Scenario}
	'Scenario:'
	name=Description
	(meta=Meta)?
	(givenStories=GivenStories)?
	(steps+=AbstractStep)*
	(examples=Examples)?;

GivenStories:
	'GivenStories:'
	resources+=StoryPath+;

StoryPath:
	path=PATH ','?;

Meta:
	{Meta}
	'Meta:'
	metaElements+=AbstractMetaElement (metaItems+=AbstractMetaElement)*;

AbstractMetaElement:
	
	(MetaElementDefault | MetaElementProcess | MetaElementEntity | MetaElementComponent | MetaElementStepClass) 
;

MetaElementDefault:
	'@' (name=ID value=ID)
;

MetaElementProcess:
	'@' 'processMeta' process = [process::BusinessProcessDefinition|Fqn]
;

MetaElementEntity:
	'@' 'entityMeta' entity = [entity::LEntity|Fqn]
;

MetaElementComponent:
	'@' 'unitMeta' component = [composite::UnitInstance|Fqn] 
;

MetaElementStepClass:
	'@' 'stepClassMeta' stepClass = Fqn 
;

AbstractStep hidden(WS, SL_COMMENT):
	(GivenStep | WhenStep | ThenStep)
	(=> ands+=AndStep*)?;

GivenStep:
	{GivenStep}
	'Given' stepDescription=StepDescription NEWLINE
	(table=Table NEWLINE)?	
;

WhenStep:
	{WhenStep}
	'When' stepDescription=StepDescription NEWLINE
	(table=Table NEWLINE)?	
;

ThenStep:
	{ThenStep}
	'Then' stepDescription=StepDescription NEWLINE
	(table=Table NEWLINE)?	
;

AndStep:
	{AndStep}
	'And' stepDescription=StepDescription NEWLINE
	(table=Table NEWLINE)?	
;

InOrderTo:
	'In order to' name=NarrativeElementContent;

AsA:
	'As a' roles+=[org::BusinessRole|Fqn] (',' roles+=[org::BusinessRole|Fqn])*;

IWantTo:
	'I want to' name=NarrativeElementContent;

Examples:
	'Examples:'
	table=Table
;

Table hidden():
	{Table}
	(rows+=TableRow*);

TableRow hidden():
	{TableRow}
	'|' (cells += TableCell ('|' cells += TableCell)*) '|' NEWLINE
;

TableCell:
	{TableCell}
	name = Content
;

StepDescription:
	(pieces+=AbstractStepDescriptionPiece)+
;

AbstractStepDescriptionPiece :
	
	(ProcessSelection | EntitySelection | ComponentSelection | => NormalStepDescriptionPiece)
;

ProcessSelection:
	'process' process = [process::BusinessProcessDefinition|ID]
;

EntitySelection:
	'entity' entity = [entity::LEntity|ID]
;

ComponentSelection:
	'unit' unit = [composite::UnitInstance|ID] 
;

NormalStepDescriptionPiece:
	word = Word
;

Description returns ecore::EString hidden():
	Content NEWLINE+;
	

Word returns ecore::EString hidden():
	(WS | STRING | ID | INT | ANY_OTHER | PLACEHOLDER );

NarrativeElementContent returns ecore::EString:
	(STRING | ID | INT | ANY_OTHER | PLACEHOLDER) (STRING | ID | INT | ANY_OTHER | PLACEHOLDER)*;

Content returns ecore::EString:
	(WS | STRING | ID | INT | ANY_OTHER | PLACEHOLDER) (WS | STRING | ID | INT | ANY_OTHER | PLACEHOLDER)*;

//---


FqnWithWildCard:
	Fqn ('.' '*')?;

Fqn:
  ValidID (=>'.' ValidID)*;
  
ValidID:
	ID;
	
terminal ID:
	'^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

terminal INT returns ecore::EDouble:
	'-'? ('0'..'9')+ ('.' ('0'..'9')+)?;

terminal PLACEHOLDER:
	'<' ('a'..'z' | 'A'..'Z') !('.' | '>' | '\n' | '\r')* '>';

terminal PATH:
	'/' ('/' | '.' | '_' | 'a'..'z' | 'A'..'Z' | '0'..'9')+;

terminal STRING:
	'"' ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	"'" ('\\' ('b' | 't' | 'n' | 'f' | 'r' | 'u' | '"' | "'" | '\\') | !('\\' | "'"))* "'";

terminal SL_COMMENT:
	'!--' !('\n' | '\r')* NEWLINE;

terminal WS:
	(' ' | '\t');

terminal NEWLINE:
	'\r'? '\n'?;

terminal ANY_OTHER:
	.;