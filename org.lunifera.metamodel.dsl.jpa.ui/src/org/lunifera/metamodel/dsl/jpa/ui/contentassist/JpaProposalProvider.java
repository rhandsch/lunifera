/*
 * generated by Xtext
 */
package org.lunifera.metamodel.dsl.jpa.ui.contentassist;

import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.text.contentassist.ICompletionProposal;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.lunifera.metamodel.dsl.jpa.services.JpaGrammarAccess;

import com.google.common.collect.Sets;
import com.google.inject.Inject;

/**
 * see
 * http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on
 * how to customize content assistant
 */
public class JpaProposalProvider extends AbstractJpaProposalProvider {

	/*
	 * private static final Set<String> FILTERED_KEYWORDS = Sets.newHashSet(
	 * "text", "line", "class", "behavior", "style", "entity");
	 * 
	 * @Override public void completeKeyword(Keyword keyword,
	 * ContentAssistContext contentAssistContext, ICompletionProposalAcceptor
	 * acceptor) { if (FILTERED_KEYWORDS.contains(keyword.getValue())) { //
	 * don't propose keyword return; } if
	 * (keyword.getValue().equals("XNullable")) {
	 * keyword.setValue("XXNullable"); return; } super.completeKeyword(keyword,
	 * contentAssistContext, acceptor); }
	 */

	/*
	 * @Override public void complete_IdAnnotation(EObject model, RuleCall
	 * ruleCall, ContentAssistContext context, ICompletionProposalAcceptor
	 * acceptor) { String proposal = "@ID"; proposal =
	 * getValueConverter().toString(proposal, "STRING"); ICompletionProposal
	 * completionProposal = createCompletionProposal( proposal, context);
	 * acceptor.accept(completionProposal); }
	 * 
	 * 
	 * public void completeAnnotations(EObject model, Assignment assignment,
	 * ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
	 * 
	 * // compute the plain proposal String proposal =
	 * "Description for model #";
	 * 
	 * // convert it to a valid STRING-terminal proposal =
	 * getValueConverter().toString(proposal, "STRING");
	 * 
	 * // create the completion proposal // the result may be null as the
	 * createCompletionProposal(..) methods // check for valid prefixes // and
	 * terminal token conflicts ICompletionProposal completionProposal =
	 * createCompletionProposal( proposal, context);
	 * 
	 * // register the proposal, the acceptor handles null-values gracefully
	 * acceptor.accept(completionProposal); }
	 */
}
