/*******************************************************************************
 * Copyright (c) 2012 Cristiano Gavi√£o.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *******************************************************************************/

grammar org.lunifera.metamodel.dsl.software.composition.CompositeModelDsl with org.eclipse.xtext.common.Terminals
											
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.lunifera.org/metamodel/dsl/organization/en/OrganizationDsl" as org
import "http://www.lunifera.org/metamodel/dsl/component/template/library/ComponentTemplateLibraryDsl" as library
generate compositeModelDsl "http://www.lunifera.org/metamodel/dsl/software/composition/CompositeModelDsl"

CompositeModelInstance:
	(
		('modelID' name=Fqn ('nesting' parentCompositeModel = [CompositeModelInstance|Fqn])? 
			('targetUnit' targetUnit = [UnitInstance|Fqn])?
		)
	(
		(imports+=Import*) &
		('modelingType' compositeModelType=[library::CompositionModelType|Fqn]) &
		('description' description = STRING)?
	)
	(
		(
			(compositeElements+=AbstractCompositionModelElementInstance*) 
		) 
	)
	
	)
;	

Import returns library::Import:
	'import' importedNamespace=FqnWithWildCard;
	
AbstractCompositionModelElementInstance:
	UnitInstance | LinkInstance | ConstraintLinkInstance | ElementInstanceGroup
;


ElementInstanceGroup:
	{ElementInstanceGroup}
	'group' (name=Fqn)? 
		'{' (
				(elementInstances+=AbstractCompositionModelElementInstance*)
			)	
		'}'
;

UnitInstance:
	('unit' name=Fqn)
	( 'of' superType=[library::UnitType|Fqn])?
	('{'
		(
			('description' description = STRING)? &
			('ownership' ownership = [org::Organization|Fqn])? &
			('creator' creator = [org::Worker|Fqn])? &
			('creationDate' creationDate = STRING)?
		)
		('subunits:''{'
				 (childrenUnits += UnitInstance*)
	 		'}'
	 	)?
		('overrides'
		'{'
			('attributes:''{'
				 (attributesCaptured += GeneralAttributeCapture*)
	 		'}')?
			

		'}')?	
	'}')?
;

AbstractLinkInstance :
	LinkInstance | ConstraintLinkInstance
;

LinkInstance:
	('link' name=Fqn)
	('of' linkType=[library::LinkType|Fqn])?
	('{'
		(
			('description' description = STRING)? &
			('ownership' ownership = [org::Organization|Fqn])? &
			('creator' creator = [org::Worker|Fqn])? &
			('creationDate' creationDate = STRING)? &
			(sourceEndPoint=SourceEndPointInstance)? &
			(targetEndPoint=TargetEndPointInstance)?
		)
		// link always goes from a requirement to a capability
	'}')?
;

ConstraintLinkInstance:
	('constraintLink' name=Fqn)
	('of' constraintLinkType=[library::ConstraintLinkType|Fqn])?
	('{'
		(
			('description' description = STRING)? &
			('ownership' ownership = [org::Organization|Fqn])? &
			('creator' creator = [org::Worker|Fqn])? &
			('creationDate' creationDate = STRING)? &
			(sourceEndPoint=SourceEndPointInstance)? &
			(targetEndPoint=TargetEndPointInstance)?		
		)
	'}')?
;

GeneralAttributeCapture:
	{GeneralAttributeCapture}
	(
		'set' captureAttributeSpec = [library::GeneralAttributeSpec|Fqn]
		'with''(' values+=STRING (',' values+=STRING)* ')'			
	) 
;

AbstractEndPointInstance:
	(SourceEndPointInstance | TargetEndPointInstance)
;

SourceEndPointInstance:
	{SourceEndPointInstance}
	(
	('from' unitInstance=[UnitInstance|Fqn])
	('requiring' requiredCapabilityCapture=[library::RequiredCapabilityCapture|Fqn])?
	('attributes:''{'
	  (attributesCaptured += GeneralAttributeCapture*)
	 '}')?
	 )
;

TargetEndPointInstance:
	{TargetEndPointInstance}
	(
		('to' unitInstance=[UnitInstance|Fqn])
		('providing' providedCapabilityCapture=[library::ProvidedCapabilityCapture|Fqn])?
		('attributes:''{'
			(attributesCaptured += GeneralAttributeCapture*)
		'}')?
	)
;

FqnWithWildCard:
	Fqn ('.' '*')?;

Fqn:
	ID ('.' ID)*
;  
