/*******************************************************************************
 * Copyright (c) 2011, 2012 Cristiano Gavião - Lunifera.org.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Cristiano Gavião - initial API and implementation
 *******************************************************************************/
/*
* generated by Xtext
*/
package org.lunifera.metamodel.dsl.component.template.library.ui.labeling;

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.AbstractCapabilityCapture;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.AnalysisState;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ArtifactType;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ArtifactTypeGroup;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.CapabilityType;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.CapabilityTypeGroup;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.Classifier;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ClassifierGroup;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ComponentTemplateLibrary;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ComponentTemplateLibraryDslPackage;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.CompositionModelType;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.CompositionTypeGroup;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ConstraintLinkType;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ConstraintLinkTypeGroup;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ConstraintType;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ConstraintTypeGroup;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ConstraintTypeGroupCapture;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.GeneralAttributeCapture;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.GeneralAttributeSpec;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.Import;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.LinkType;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.LinkTypeGroup;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.MessageDefinition;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.MessageDefinitionGroup;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ProvidedCapabilityCapture;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.RequiredCapabilityCapture;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ResolutionType;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ResolutionTypeGroup;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.UnitType;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.UnitTypeGroup;
import org.lunifera.metamodel.dsl.component.template.library.ui.utils.ComponentTemplateLibraryDslUiUtility;

import com.google.inject.Inject;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
public class ComponentTemplateLibraryDslLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	public ComponentTemplateLibraryDslLabelProvider(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	@Inject
	private IQualifiedNameProvider qualifiedNameProvider;

	@Inject
	private ComponentTemplateLibraryDslUiUtility ecoreUtils;

	/*
	 * //Labels and icons can be computed like this:
	 */

	public String image(AbstractCapabilityCapture ele) {
		return "Capabilities_14.png";
	}

	public String image(ArtifactType artifactType) {

		if (artifactType.isAbstract()) {
			return "Artifact_Abs_14.png";

		} else {
			return "Artifact_14.png";
		}
	}

	public String image(ArtifactTypeGroup ele) {
		return "Artifact_16.png";
	}

	public String image(CapabilityType ele) {
		if (ele.isAbstract())
			return "Capabilities_Abs_14.png";
		else
			return "Capabilities_14.png";
	}

	public String image(CapabilityTypeGroup ele) {
		return "Capabilities_16.png";
	}

	public String image(Classifier ele) {
		return "DataType_14.png";
	}

	public String image(ClassifierGroup ele) {
		return "DataType_16.png";
	}

	public String image(ComponentTemplateLibrary ele) {
		return "Lunifera_Blueprint_16.png";
	}

	public String image(CompositionModelType ele) {
		if (ele.isAbstract())
			return "ModelType_Abs_14.png";
		else
			return "ModelType_14.png";
	}

	public String image(CompositionTypeGroup ele) {
		return "ModelType_16.png";
	}


	public String image(ConstraintLinkType ele) {
		if (ele.isAbstract())
			return "Constraint_Link_Abs_14.png";
		else
			return "Constraint_Link_14.png";
	}

	public String image(ConstraintLinkTypeGroup ele) {
		return "Constraint_Link_16.png";
	}

	public String image(ConstraintType ele) {
		if (ele.isAbstract())
			return "Constraint_Abs_14.png";
		else
			return "Constraint_14.png";
	}

	// Images

	public String image(ConstraintTypeGroup ele) {
		return "Constraint_16.png";
	}

	public String image(ConstraintTypeGroupCapture ele) {
		return "Constraint_16.png";
	}

	public String image(Import ele) {
		return "importNamespace_14.png";
	}

	public String image(LinkType ele) {
		if (ele.isAbstract())
			return "Link_Abs_14.png";
		else
			return "Link_14.png";
	}

	public String image(LinkTypeGroup ele) {
		return "Link_16.png";
	}

	public String image(MessageDefinition ele) {
		return "Message_Definition_14.png";
	}

	public String image(MessageDefinitionGroup ele) {
		return "Message_Definition_16.png";
	}

	public String image(ProvidedCapabilityCapture ele) {
		return "CapabilityProvided_Sepia_14.png";
	}

	public String image(RequiredCapabilityCapture ele) {
		return "CapabilityRequired_sepia_14.png";
	}

	public String image(ResolutionType ele) {
		return "Resolution_14.png";
	}

	public String image(ResolutionTypeGroup ele) {
		return "Resolution_14.png";
	}

	public String image(UnitType unitType) {

		// TODO identify why this is not being resolved right
		String analysisState = ecoreUtils.retrieveFirstEnumNotNoneInHierarchy(
				unitType.eContainer(), unitType,
				ComponentTemplateLibraryDslPackage.Literals.UNIT_TYPE__SUPER_TYPE,
				ComponentTemplateLibraryDslPackage.Literals.UNIT_TYPE__ANALYSIS_STATE,
				AnalysisState.NONE.getLiteral());

		if (analysisState.isEmpty()) {
			if (unitType.isAbstract()) {
				return "ContentAbstract_14.png";
			} else {
				return "ExclamationRed_11.png";
			}
		} else if (analysisState.equalsIgnoreCase(AnalysisState.CONCEPTUAL
				.name())) {
			if (unitType.isAbstract()) {
				return "Node_Abs_14.png";

			} else {
				return "Node_14.png";
			}

		} else {
			if (unitType.isAbstract()) {
				return "Concrete_Abs_Component_14.png";

			} else {
				return "Concrete_Component_14.png";
			}
		}
	}

	public String image(GeneralAttributeSpec ele) {
		return "Attribute_14.gif";
	}

	public String image(GeneralAttributeCapture ele) {
		return "Attribute_14.gif";
	}
	
	public String image(UnitTypeGroup ele) {
		return "UnitGroup_16.png";
	}
	
	public String text(AbstractCapabilityCapture ele) {
		QualifiedName qualifiedName = qualifiedNameProvider
				.getFullyQualifiedName(ele);
		return qualifiedName.skipFirst(qualifiedName.getSegmentCount() - 2)
				.toString();
	}

	public String text(ArtifactTypeGroup ele) {
		return " Artifact Types";
	}

	public String text(CapabilityTypeGroup ele) {
		return " Capability Types";
	}

	public String text(Classifier ele) {
		QualifiedName qualifiedName = qualifiedNameProvider
				.getFullyQualifiedName(ele);
		return qualifiedName.skipFirst(qualifiedName.getSegmentCount() - 2)
				.toString();
	}

	public String text(ClassifierGroup ele) {
		return " Classifiers";
	}

	public String text(CompositionTypeGroup ele) {
		return " Composition Types";
	}

	public String text(ConstraintLinkTypeGroup ele) {
		return " ConstraintLink Types";
	}

	public String text(ConstraintTypeGroup ele) {
		return " Constraint Types";
	}
	
	public String text(LinkTypeGroup ele) {
		return " Link Types";
	}

	public String text(MessageDefinitionGroup ele) {
		return " Message Definitions";
	}

	public String text(ResolutionTypeGroup ele) {
		return " Resolution Types";
	}

	public String text(UnitTypeGroup ele) {
		return " Unit Types";
	}

}
