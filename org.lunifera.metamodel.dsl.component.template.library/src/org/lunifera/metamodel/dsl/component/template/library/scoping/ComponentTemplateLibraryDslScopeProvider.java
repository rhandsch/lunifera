/*******************************************************************************
 * Copyright (c) 2011, 2012 Cristiano Gavião - Lunifera.org.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Cristiano Gavião - initial API and implementation
 *******************************************************************************/
/*
 * generated by Xtext
 */
package org.lunifera.metamodel.dsl.component.template.library.scoping;

import javax.inject.Inject;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.impl.ScopeBasedSelectable;
import org.eclipse.xtext.scoping.impl.SelectableBasedScope;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.AbstractCapabilityCapture;
import org.lunifera.metamodel.dsl.component.template.library.componentTemplateLibraryDsl.ComponentTemplateLibraryDslPackage;
import org.lunifera.metamodel.dsl.component.template.library.utils.ComponentTemplateLibraryDslModelUtility;

import com.google.common.base.Predicate;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping on
 * how and when to use it
 * 
 */
public class ComponentTemplateLibraryDslScopeProvider extends
		AbstractDeclarativeScopeProvider {

	@Inject
	private ComponentTemplateLibraryDslModelUtility ecoreUtils;

	@Override
	public IScope getScope(EObject context, EReference reference) {
		// TODO should be removed from this class. it used to debug.
		return super.getScope(context, reference);
	}

	/**
	 * Should select only non abstract capabilities.
	 * 
	 * @param context
	 * @param reference
	 * @return
	 */
	public IScope scope_AbstractCapabilityCapture_capability(
			final AbstractCapabilityCapture context, EReference reference) {
		IScope unfilteredScope = delegateGetScope(context, reference);

		IScope filtered = SelectableBasedScope.createScope(IScope.NULLSCOPE,
				new ScopeBasedSelectable(unfilteredScope),
				new Predicate<IEObjectDescription>() {
					public boolean apply(IEObjectDescription input) {
						EObject eObject = input.getEObjectOrProxy();
						if (eObject.eIsProxy()) {
							eObject = EcoreUtil.resolve(eObject, context);
						}

						Boolean abstractBool = (Boolean) eObject
								.eGet(ComponentTemplateLibraryDslPackage.eINSTANCE
										.getAbstractLibraryElement_Abstract());
						if (abstractBool != null
								&& abstractBool.booleanValue() == true) {
							return false;
						}
						//

						return true;
					}
				}, ComponentTemplateLibraryDslPackage.eINSTANCE
						.getAbstractCapabilityCapture(), true);
		return filtered;
	}

	/**
	 * Must supply only Attributes that was specified in the selected
	 * {@link CapabilityType} or its parents.
	 * 
	 * @param context
	 * @param reference
	 * @return
	 */
	// public IScope scope_GeneralAttributeCapture_capturedAttributeSpec(
	// final GeneralAttributeCapture context, EReference reference) {
	//
	// EObject currentAttributeContainer;
	// if (context.eContainer() instanceof AbstractCapabilityCapture)
	// {
	// CapabilityType currentCapability = (CapabilityType) context
	// .eContainer()
	// .eGet(ComponentLibraryBuilderDslPackage.Literals.ABSTRACT_CAPABILITY_CAPTURE__CAPABILITY);
	// }
	//
	//
	// final EList<GeneralAttributeSpec> allowedElements = ecoreUtils
	// .getElementsFromHierarchy(
	// GeneralAttributeSpec.class,
	// currentCapability,
	// ComponentLibraryBuilderDslPackage.Literals.CAPABILITY_TYPE__SUPER_TYPE,
	// ComponentLibraryBuilderDslPackage.Literals.CAPABILITY_TYPE__ATTRIBUTES);
	// IScope unfilteredScope = delegateGetScope(context, reference);
	//
	// IScope filtered = SelectableBasedScope.createScope(IScope.NULLSCOPE,
	// new ScopeBasedSelectable(unfilteredScope),
	// new Predicate<IEObjectDescription>() {
	// public boolean apply(IEObjectDescription input) {
	// EObject eObject = input.getEObjectOrProxy();
	// if (eObject.eIsProxy()) {
	// eObject = EcoreUtil.resolve(eObject, context);
	// }
	// if (allowedElements.contains(eObject)) {
	// return true;
	// }
	// return false;
	// }
	// }, null, true);
	//
	// return filtered;
	// }

	// public IScope scope_ConstraintTypeCapture_constraint(
	// final ConstraintTypeCapture context, EReference reference) {
	//
	// final AbstractLibraryElement element = ecoreUtils
	// .returnTargetRootContainer(AbstractLibraryElement.class,
	// context);
	//
	// IScope unfilteredScope = delegateGetScope(context,
	// ComponentLibraryBuilderDslPackage.eINSTANCE
	// .getConstraintTypeCapture_Constraint());
	//
	// IScope filtered = SelectableBasedScope.createScope(IScope.NULLSCOPE,
	// new ScopeBasedSelectable(unfilteredScope),
	// new Predicate<IEObjectDescription>() {
	// public boolean apply(IEObjectDescription input) {
	// EObject eObject = input.getEObjectOrProxy();
	// if (eObject.eIsProxy()) {
	// eObject = EcoreUtil.resolve(eObject, context);
	// }
	//
	// Boolean abstractBool = (Boolean) eObject
	// .eGet(ComponentLibraryBuilderDslPackage.eINSTANCE
	// .getAbstractLibraryElement_Abstract());
	// if (abstractBool != null
	// && abstractBool.booleanValue() == true)
	// return false;
	//
	// // TODO must search for the right container type:
	// // UnitTypeRequiredCapability,
	// // UnitTypeProvidedCapability
	// EList<AbstractLibraryElement> allowedElements = ecoreUtils
	// .getElementsFromHierarchy(
	// AbstractLibraryElement.class,
	// eObject,
	// ComponentLibraryBuilderDslPackage.Literals.CONSTRAINT_TYPE__SUPER_TYPE,
	// ComponentLibraryBuilderDslPackage.Literals.CONSTRAINT_TYPE__ALLOWED_FOR);
	// if (!allowedElements.contains(element)) {
	// return false;
	// }
	//
	// return true;
	// }
	// }, ComponentLibraryBuilderDslPackage.eINSTANCE
	// .getAbstractLibraryElement(), true);
	// return filtered;
	// }

}
